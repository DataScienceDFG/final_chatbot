8##Shortcuts used ----- ''' rdcn - retrieve dataflow case number '''

from django.shortcuts import render
# Create your views here.
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from .models import WhatsappMessages
from twilio.rest import Client
from django.conf import settings
import pandas as pd
import psycopg2
from sqlalchemy import create_engine
from sqlalchemy import text
import getpass
import random
import string
from collections import Counter
from urllib.parse import quote_plus as urlquote
import re
import oracledb
import requests
import json
import datetime as dt
from datetime import datetime, timedelta
import threading
import time
from django.utils import timezone
from django.template.loader import get_template
from twilio.twiml.messaging_response import MessagingResponse
from django.template import Template
import phonenumbers
from datetime import date
date_string = dt.date.today().strftime('%Y-%m-%d')

regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$' #For Email Validation
regex1 = "^[a-zA-Z ]*$" #For names
regex2 = '^[a-zA-Z0-9]*$' #For Passport Validation

twilioclient = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)



msg_phone_validated = "Hi {}, \nHow can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
msg_for_email_validation = "Hello, Thanks for contacting DataFlow.\n\nPlease may I have the email address you used to register with us?"
msg_name_required = "Dear Applicant, We are unable to find any application in our records.\n\nPlease confirm your name to continue."
msg_find_detailed_process = 'Please find the detailed process here : {} \n\nDo you have any other questions? (Y or N)'
msg_tap_link = "Tap on the link to redirect to the page : {} \n\nDo you have any other questions? (Y or N)"

queries_for_name = "How can we help you today?\nSelect the query by choosing the relevant number from 1-11 \n\n1. Case status \n2. How to apply \n3. Technical error  \n4. Report clarification \n5. Additional Document Verification \n6. Report copy request \n7. Report re-issuance queries \n8. Retrieve DataFlow case number \n9. Re-verification and appeal enquiries \n10. Sharing documents/information requested by DataFlow Team \n11. Others/General Queries"


bahrain_client_name = "What's your Regulator's name?" \
                      "\n1. Bahrain Ministry of Justice, Islamic Affairs and Waqf" \
                      "\n2. Council for Regulating the Practice of Engineering Professions" \
                      "\n3. Higher Education Council, Bahrain" \
                      "\n4. Ministry of Education Bahrain" \
                      "\n5. Ministry of Labour and Social Development, Bahrain" \
                      "\n6. Ministry of Works, Municipalities Affairs and Urban Planning Bahrain" \
                      "\n7. National Health Regulatory Authority - Bahrain (NHRA)" \
                      "\n\nPlease type the number from 1-7 to select the regulator body."

saudi_client_name = "What's your Regulator's name?" \
                    "\n1. National Center for Complementary and Alternative Medicine" \
                    "\n2. Saudi Commission for Health Specialties" \
                    "\n\nPlease type the number from 1 or 2 to select the regulator body."
                    
saudi_client_name1 = "What's your Regulator's name?" \
                    "\n1. Saudi Commission for Health Specialties" \
                    "\n\nPlease type the number 1 to select the regulator body."

dhaman_client_name = "What's your Regulator's name?" \
                     "\n1. DHAMAN" \
                     "\n2. Kuwait Society of Engineers" \
                     "\n\nPlease type the number from 1 or 2 to select the regulator body."

oman_client_name = "What's your Regulator's name?" \
                   "\n1. Oman Medical Specialty Board" \
                   "\n2. Oman Society of Engineers" \
                   "\n\nPlease type the number from 1 or 2 to select the regulator body."

oman_client_name1 = "What's your Regulator's name?" \
                   "\n1. Oman Medical Specialty Board" \
                   "\n\nPlease type the number 1 to select the regulator body."

qatar_client_name = "What's your Regulator's name?" \
                    "\n1. Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)" \
                    "\n\nPlease type the number 1 to select the regulator body."

singapore_client_name = "What's your Regulator's name?" \
                        "\n1. Ministry of Manpower, Singapore" \
                        "\n\nPlease type the number 1 to select the regulator body."

dubai_client_name = "What's your Regulator's name?" \
                    "\n1. Community Development Authority" \
                    "\n2. Department of Community Development Abu Dhabi" \
                    "\n3. Department of Health, Abu Dhabi" \
                    "\n4. Dubai Corporation For Ambulance Services" \
                    "\n5. Dubai Health Authority" \
                    "\n6. Ministry of Education UAE" \
                    "\n7. Ministry of Health and Prevention" \
                    "\n8. Ministry of Human Resources and Emiratisation(MOHRE)" \
                    "\n9. Sharjah Health Authority" \
                    "\n10. Social Services Department Sharjah" \
                    "\n\nPlease type the number from 1-10 to select the regulator body."

dubai_client_name1 = "What's your Regulator's name?" \
                    "\n1. Department of Health, Abu Dhabi" \
                    "\n2. Dubai Health Authority" \
                    "\n3. Ministry of Human Resources and Emiratisation(MOHRE)" \
                    "\n\nPlease type the number from 1-3 to select the regulator body."

uk_client_name = "What's your Regulator's name?" \
                 "\n1. General Medical Council United Kingdom" \
                 "\n\nPlease type the number 1 to select the regulator body."

yemen_client_name = "What's your Regulator's name?" \
                    "\n1. Yemeni Supreme Medical Council" \
                    "\n\nPlease type the number 1 to select the regulator body."

bahrain_client_name2 = "What's your Regulator's name?" \
                      "\n1. National Health Regulatory Authority - Bahrain (NHRA)" \
                      "\n\nPlease type the number 1 to select the regulator body."

def server(phone,email=None):
    dsn = oracledb.makedsn(
        'vfprodv1.cyhocriucjwq.eu-west-1.rds.amazonaws.com',
        '1521',
        service_name='VERIFLOW')
    conn = oracledb.connect(
        user='DATASCIENCETEAM',
        password='Z7dOtce52nV!2Qe8',
        dsn=dsn)
    qry = f"select cd.BARCODE, cd.casecompletedondate, (select name from casestatus where id = cd.casestatus_id) case_status, (select name from customer where id = cd.customer_id) client_name, app.passportcurrentno, app.personalmailid, app.telephonenumber, case when applicantmiddlename is not null then app.applicantfirstname || ' ' ||applicantmiddlename || ' ' || app.applicantlastname else app.applicantfirstname || ' ' || app.applicantlastname end as applicantname from casedetails cd join appuserdetail app on cd.id = app.case_id where app.telephonenumber = '{phone}'"
    df_main = pd.read_sql(qry,conn)
    if df_main.shape[0]>0:
        return df_main
    else:
        return None

def server_email(email):
    dsn = oracledb.makedsn(
        'vfprodv1.cyhocriucjwq.eu-west-1.rds.amazonaws.com',
        '1521',
        service_name='VERIFLOW')
    conn = oracledb.connect(
        user='DATASCIENCETEAM',
        password='Z7dOtce52nV!2Qe8',
        dsn=dsn)
    qry = f"select cd.BARCODE, cd.casecompletedondate, (select name from casestatus where id = cd.casestatus_id) case_status, (select name from customer where id = cd.customer_id) client_name, app.passportcurrentno, app.personalmailid, app.telephonenumber, case when applicantmiddlename is not null then app.applicantfirstname || ' ' ||applicantmiddlename || ' ' || app.applicantlastname else app.applicantfirstname || ' ' || app.applicantlastname end as applicantname from casedetails cd join appuserdetail app on cd.id = app.case_id where app.personalmailid = '{email}'" 
    df_main3 = pd.read_sql(qry,conn)
    if df_main3.shape[0]>0:
        return df_main3
    else:
        return None


def multiple_client_email(email, case_number_by_user):
    email = email.lower()
    df_main_multiple_cases_email = server_email(email)
    case_number = case_number_by_user
    case_number = case_number.replace('-','')
    case_number = case_number[:4] + '-' + case_number[4:]
    case_number_by_user = case_number[:9] + '-' + case_number[9:]
    if df_main_multiple_cases_email is not None:
        case_number = df_main_multiple_cases_email['BARCODE'].to_list()[0]
        temp = []
        if case_number is not None:   
            if case_number == case_number_by_user:
                bar = df_main_multiple_cases_email.loc[(df_main_multiple_cases_email['BARCODE'] == case_number)]
                client_name = bar['CLIENT_NAME'][0]
                return client_name
            else:
                msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
                return msg
        else:
            msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
            return msg
    else:
        msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        return msg

def multiple_client_phone(phone, case_number_by_user):
    phone = '+' + phone
    phone = get_country(phone)
    case_number = case_number_by_user
    case_number = case_number.replace('-','')
    case_number = case_number[:4] + '-' + case_number[4:]
    case_number_by_user = case_number[:9] + '-' + case_number[9:]
    df_main_multiple_cases = server(phone,email=None)
    if df_main_multiple_cases is not None:
        case_number = df_main_multiple_cases['BARCODE'].to_list()
        print('case_number',case_number)
        if case_number is not None:
            for i in range(len(case_number)):
                if case_number[i] == case_number_by_user:
                    bar = df_main_multiple_cases.loc[(df_main_multiple_cases['BARCODE'] == case_number[i])]
                    client_name = bar['CLIENT_NAME'].to_list()[0]
                    return client_name

            else:
                msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
                return msg
        else:
            msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
            return msg

    else:
        msg = "We could not find your case number with us. \n\nPlease provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        return msg

def server_multiple_case(phone,case_number_by_user):
    dsn = oracledb.makedsn(
        'vfprodv1.cyhocriucjwq.eu-west-1.rds.amazonaws.com',
        '1521',
        service_name='VERIFLOW')
    conn = oracledb.connect(
        user='DATASCIENCETEAM',
        password='Z7dOtce52nV!2Qe8',
        dsn=dsn)
    qry = f"select cd.BARCODE, cd.casecompletedondate, (select name from casestatus where id = cd.casestatus_id) case_status, (select name from customer where id = cd.customer_id) client_name, app.passportcurrentno, app.personalmailid, app.telephonenumber, case when applicantmiddlename is not null then app.applicantfirstname || ' ' ||applicantmiddlename || ' ' || app.applicantlastname else app.applicantfirstname || ' ' || app.applicantlastname end as applicantname from casedetails cd join appuserdetail app on cd.id = app.case_id where app.telephonenumber = '{phone}' and cd.barcode = '{case_number_by_user}'"
    df_main = pd.read_sql(qry,conn)
    if df_main.shape[0]>0:
        return df_main
    else:
        return "None"

def server_multiple_case_email(email,case_number_by_user):
    dsn = oracledb.makedsn(
        'vfprodv1.cyhocriucjwq.eu-west-1.rds.amazonaws.com',
        '1521',
        service_name='VERIFLOW')
    conn = oracledb.connect(
        user='DATASCIENCETEAM',
        password='Z7dOtce52nV!2Qe8',
        dsn=dsn)
    qry = f"select cd.BARCODE, cd.casecompletedondate, (select name from casestatus where id = cd.casestatus_id) case_status, (select name from customer where id = cd.customer_id) client_name, app.passportcurrentno, app.personalmailid, app.telephonenumber, case when applicantmiddlename is not null then app.applicantfirstname || ' ' ||applicantmiddlename || ' ' || app.applicantlastname else app.applicantfirstname || ' ' || app.applicantlastname end as applicantname from casedetails cd join appuserdetail app on cd.id = app.case_id where app.personalmailid = '{email}' and cd.barcode = '{case_number_by_user}'"
    df_main = pd.read_sql(qry,conn)
    if df_main.shape[0]>0:
        return df_main
    else:
        return "None"

def get_country(phone):
    try:
        parsed_number = phonenumbers.parse(phone)
        country_code = phonenumbers.region_code_for_number(parsed_number)
        national_number = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)[len(country_code)+1:]
        return  national_number
    except phonenumbers.phonenumberutil.NumberParseException:
        return None, None

def phone_validation(phone):
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone,email=None)
    if df_main is not None:
        if not df_main.loc[df_main['TELEPHONENUMBER'] == phone].empty:
            phn = df_main.loc[df_main['TELEPHONENUMBER'] == phone]
            name = df_main['APPLICANTNAME'].to_list()
            names = []
            for i in range(len(name)):
                stripped_names = name[i].replace(" ", "").replace(",", ", ")
                names.append(stripped_names)
            if len(set(names)) > 1:
                for i in range(len(name)):
                    if name[i] != name[i-1]:
                        msg = msg_for_email_validation
                        return msg
                    else:
                        name = phn['APPLICANTNAME'].to_list()[0]
                        first_name = name.split(" ")[0]
                        formatted_name = first_name[0].upper() + first_name[1:].lower()
                        msg = msg_phone_validated.format(formatted_name)
                        return msg
            else:
                name = phn['APPLICANTNAME'].to_list()[0]
                first_name = name.split(" ")[0]
                formatted_name = first_name[0].upper() + first_name[1:].lower()
                msg = msg_phone_validated.format(formatted_name)
                return msg
        else:
            msg = msg_for_email_validation
            return msg
    else:
        msg = msg_for_email_validation
        return msg  

def email_validation(email):
    email = email.lower()
    df_main= server_email(email)
    if(re.search(regex,email)):
        if df_main is not None:
            if not df_main.loc[df_main['PERSONALMAILID'].str.lower() == email].empty:
                msg = "Please share your passport number."
                return msg
            else:
                msg = msg_name_required
                return msg  
        else:
            msg = msg_name_required
            return msg                 
    else: 
        msg = "Please may I have the email address you used to register with us?"
        return msg

def email_verification(email):
    email = email.lower()
    data1 = server_email(email)
    df_main = data1
    if(re.search(regex,email)):
        if df_main is not None:
            if not df_main.loc[df_main['PERSONALMAILID'] == email].empty:
                msg = "Are you using Google chrome browser for login?\nPlease type Y or N"
                return msg
            else:
                msg = "Dear Applicant, Please use the same email id which has been used during the registration process.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
                return msg  
        else:
            msg = "Dear Applicant, Please use the same email id which has been used during the registration process.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
            return msg     
            
    else: 
        msg = "Dear Applicant, Please use the same email id which has been used during the registration process.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
        return msg

def passport_validation(passport_number,email):
    email = email.lower()
    passport_number = passport_number.upper()
    df_main = server_email(email)
    if(re.search(regex2,passport_number)):
        emails = df_main.loc[df_main['PERSONALMAILID'] == email]
        if not emails.loc[emails['PASSPORTCURRENTNO'].str.upper()== passport_number].empty:
            eml = df_main.loc[df_main['PERSONALMAILID'] == email]
            name = eml['APPLICANTNAME'].to_list()[0]
            first_name = name.split(" ")[0]
            formatted_name = first_name[0].upper() + first_name[1:].lower()
            msg = "Hi {}, \nHow can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries".format(formatted_name)
            return msg
        else:
            msg = "Please confirm your name"
            return msg
    else: 
        msg = "Please share your passport number."
        return msg

def names(name):
    match = re.search(regex1, name)
    if match and len(name) >= 3:
        msg = "Hi {}, \nHow can we help you today?\nSelect the query by choosing the relevant number from 1-11 \n\n1. Case status \n2. How to apply \n3. Technical error  \n4. Report clarification \n5. Additional Document Verification \n6. Report copy request \n7. Report re-issuance queries \n8. Retrieve DataFlow case number \n9. Re-verification and appeal enquiries \n10. Sharing documents/information requested by DataFlow Team \n11. Others/General Queries".format(name)
        return msg
    else:
        msg = "Please enter the full name"
        return msg

def already_existing_user(user_in,phone,email=None):

    LCN = "What's your Regulator's country name?" \
          "\n1. Bahrain" \
          '\n2. KSA' \
          '\n3. Kuwait' \
          '\n4. Oman' \
          '\n5. Qatar' \
          '\n6. Singapore' \
          '\n7. UAE' \
          '\n8. United Kingdom' \
          '\n9. Yemen' \
          '\n\nPlease type the number from 1-9 to select the regulator country.'
       
    LCN1 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Kuwait' \
            '\n4. Oman' \
            '\n5. Qatar' \
            '\n6. Singapore' \
            '\n7. UAE' \
            '\n\nPlease type the number from 1-7 to select the regulator country.'
                                       
    LCN2 = "What's your Regulator's country name?" \
            '\n1. KSA' \
            '\n2. Oman' \
            '\n3. Qatar' \
            '\n4. UAE' \
            '\n\nPlease type the number from 1-4 to select the regulator country.'
             
    LCN3 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Oman' \
            '\n4. Qatar' \
            '\n5. UAE' \
            '\n\nPlease type the number from 1-5 to select the regulator country.'
            
    link = 'https://support.dataflowgroup.com/support/solutions/articles/17000125186-dataflow-appeal-process'
    LCN4 = msg_find_detailed_process.format(link)
    
    if user_in == '1' or user_in == '2' or user_in == '3' or user_in == '4' or user_in == '5' or user_in == '7' or user_in == '9' or user_in == '11' or user_in == '12':
        return LCN
    
    elif user_in == '6':
        return LCN3
        
    elif user_in == '8':
        return LCN2
        
    elif user_in == '10':
        return LCN4

    else:
        LCN = "Please enter a valid input : "
        return LCN

def already_existing_user_name(user_in,phone):

    LCN = "What's your Regulator's country name?" \
          "\n1. Bahrain" \
          '\n2. KSA' \
          '\n3. Kuwait' \
          '\n4. Oman' \
          '\n5. Qatar' \
          '\n6. Singapore' \
          '\n7. UAE' \
          '\n8. United Kingdom' \
          '\n9. Yemen' \
          '\n\nPlease type the number from 1-9 to select the regulator country.'
       
    LCN1 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Kuwait' \
            '\n4. Oman' \
            '\n5. Qatar' \
            '\n6. Singapore' \
            '\n7. UAE' \
            '\n\nPlease type the number from 1-7 to select the regulator country.'
                                       
    LCN2 = "What's your Regulator's country name?" \
            '\n1. KSA' \
            '\n2. Oman' \
            '\n3. Qatar' \
            '\n4. UAE' \
            '\n\nPlease type the number from 1-4 to select the regulator country.'
             
    LCN3 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Oman' \
            '\n4. Qatar' \
            '\n5. UAE' \
            '\n\nPlease type the number from 1-5 to select the regulator country.'
            
    link = 'https://support.dataflowgroup.com/support/solutions/articles/17000125186-dataflow-appeal-process'
    LCN4 = msg_find_detailed_process.format(link)
    
    if user_in == '1' or user_in == '2' or user_in == '3' or user_in == '4' or user_in == '5' or user_in == '7' or user_in == '9' or user_in == '10' or user_in == '11':
        return LCN
    
    elif user_in == '6':
        return LCN3
        
    elif user_in == '8':
        return LCN2
        
    elif user_in == '9':
        return LCN4

    else:
        LCN = "Please enter a valid input : "
        return LCN

def already_existing_user_client(us_inp,user_in,phone,email=None):
    if user_in == '1' or user_in =='2' or user_in =='3' or user_in =='7' or user_in =='11' :
        if us_inp == '1':
            cli_name = bahrain_client_name
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name
            return  cli_name

        elif us_inp == '3':
            cli_name = dhaman_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = oman_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '6':
            cli_name = singapore_client_name
            return cli_name

        elif us_inp == '7':
            cli_name = dubai_client_name
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        else:
            return "Please choose Regulator's Country Name by typing values from 1-9"
        
    elif user_in != '1' or user_in !='2' or user_in !='3' or user_in !='7' or user_in !='11' :
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n2. Ministry of works, Municipalities affairs and urban planning" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. National Center for complementary and alternative Medicine(NCCAM)" \
                       "\n2. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."

            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Health Assurance Hospitals Company(DHAMAN)" \
                       "\n2. Kuwait Society of Engineers(KSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Medical Speciality Board(OMSB)" \
                       "\n2. Oman Society of Engineers(OSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '6':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Ministry of Manpower Singapore(MOMS)" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '7':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Community Developement Authority Dubai(CDAD)" \
                       "\n2. Department of Community Development Abu-Dhabi" \
                       "\n3. Department of Health Abu Dhabi(DOHAD)" \
                       "\n4. Dubai Corporation for Ambulance Service(DCAS)" \
                       "\n5. Dubai Health Authority(DHA)" \
                       "\n6. Ministry of Education UAE(MOE UAE)" \
                       "\n7. Ministry of Health and Prevention(MOH-AP)" \
                       "\n8. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n9. Social Services Department(SSD)" \
                       "\n\nPlease type the number from 1-9 to select the regulator body."
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        else:
            return "Please choose Regulator's Country Name by typing values from 1-9"
            
def already_existing_user_client_hta(us_inp,user_in,phone,email=None):
    if user_in == '1' or user_in =='2' or user_in =='3':
        if us_inp == '1':
            cli_name = bahrain_client_name
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name
            return  cli_name

        elif us_inp == '3':
            cli_name = dhaman_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = oman_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '6':
            cli_name = singapore_client_name
            return cli_name

        elif us_inp == '7':
            cli_name = dubai_client_name
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        
    elif user_in != '1' or user_in !='3' or user_in !='2':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n2. Ministry of works, Municipalities affairs and urban planning" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. National Center for complementary and alternative Medicine(NCCAM)" \
                       "\n2. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Health Assurance Hospitals Company(DHAMAN)" \
                       "\n2. Kuwait Society of Engineers(KSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Society of Engineers(OSE)" \
                       "\n\nPlease type the number from 1to select the regulator body."
            return cli_name

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '6':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Ministry of Manpower Singapore(MOMS)" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '7':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Community Developement Authority Dubai(CDAD)" \
                       "\n2. Department of Community Development Abu-Dhabi" \
                       "\n3. Department of Health Abu Dhabi(DOHAD)" \
                       "\n4. Dubai Corporation for Ambulance Service(DCAS)" \
                       "\n5. Dubai Health Authority(DHA)" \
                       "\n6. Ministry of Education UAE(MOE UAE)" \
                       "\n7. Ministry of Health and Prevention(MOH-AP)" \
                       "\n8. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n9. Social Services Department(SSD)" \
                       "\n\nPlease type the number from 1-9 to select the regulator body."
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
                      
def already_existing_user_client_report(us_inp,user_in,phone,email=None):
    if user_in == '1' or user_in =='2' or user_in =='3':
        if us_inp == '1':
            cli_name = saudi_client_name1
            return cli_name

        elif us_inp == '2':
            cli_name = oman_client_name1
            return  cli_name

        elif us_inp == '3':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = dubai_client_name1
            return cli_name
        else:
            return "Please choose Regulator's Country Name by typing values from 1-4"
        
        
    elif user_in != '1' or user_in !='2' or user_in !='3':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return  cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Medical Specialty Board" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name
            
        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Health Abu Dhabi(DOHAD)" \
                       "\n2. Dubai Health Authority(DHA)" \
                       "\n3. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n\nPlease type the number from 1-3 to select the regulator body."
            return cli_name
        
        else:
            return "Please choose Regulator's Country Name by typing values from 1-4"

def already_existing_user_client_adv(us_inp,user_in,phone,email=None):
    if user_in == '1' or user_in =='2' or user_in =='3':
        if us_inp == '1':
            cli_name = bahrain_client_name2
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name1
            return  cli_name

        elif us_inp == '3':
            cli_name = oman_client_name1
            return cli_name

        elif us_inp == '4':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = dubai_client_name
            return cli_name
        
        else:
            return "Please choose Regulator's Country Name by typing values from 1-5"
            
        
    elif user_in == '4' or user_in =='5':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Medical Speciality Board(OMSB)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name           

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Health Abu Dhabi(DOHAD)" \
                       "\n2. Dubai Health Authority(DHA)" \
                       "\n3. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n\nPlease type the number from 1-3 to select the regulator body."
            return cli_name
    else:
        return "Please choose Regulator's Country Name by typing values from 1-5"

def already_existing_user_csdisable(user_in):
    LCN = "What's your Regulator's country name?" \
                    "\n1. Bahrain" \
                    '\n2. KSA' \
                    '\n3. Kuwait' \
                    '\n4. Oman' \
                    '\n5. Qatar' \
                    '\n6. Singapore' \
                    '\n7. UAE' \
                    '\n8. United Kingdom' \
                    '\n9. Yemen' \
                    '\n\nPlease type the number from 1-9 to select the regulator country.'
                    
    LCN1 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Kuwait' \
            '\n4. Oman' \
            '\n5. Qatar' \
            '\n6. Singapore' \
            '\n7. UAE' \
            '\n\nPlease type the number from 1-7 to select the regulator country.'
            
    LCN2 = "What's your Regulator's country name?" \
            "\n1. Bahrain" \
            '\n2. KSA' \
            '\n3. Oman' \
            '\n4. Qatar' \
            '\n5. UAE' \
            '\n\nPlease type the number from 1-5 to select the regulator country.'
            
    
    link = 'https://support.dataflowgroup.com/support/solutions/articles/17000125186-dataflow-appeal-process'
    LCN3 = msg_find_detailed_process.format(link)
     
    link = 'https://www.dataflowstatus.com/applicationstatus'
    LCN4 = msg_find_detailed_process.format(link)
    
    if user_in == '1' or user_in == '2' or user_in == '3' or user_in == '4' or user_in == '5' or user_in == '8' or user_in == '11':
        return LCN
    
    elif user_in == '6':
        return LCN2
        
    elif user_in == '7' or user_in == '10':
        return LCN4
        
    elif user_in == '9':
        return LCN3
    
    else:
        LCN = "Please enter a valid input : "
        return LCN

def already_existing_user_csdisable_client(us_inp,user_in):
    if user_in == '1' or user_in == '2' or user_in == '3':
        if us_inp == '1':
            cli_name = bahrain_client_name
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name
            return  cli_name

        elif us_inp == '3':
            cli_name = dhaman_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = oman_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '6':
            cli_name = singapore_client_name
            return cli_name

        elif us_inp == '7':
            cli_name = dubai_client_name
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        
    elif user_in != '1' or user_in != '2' or user_in != '3':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n2. Ministry of works, Municipalities affairs and urban planning" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. National Center for complementary and alternative Medicine(NCCAM)" \
                       "\n2. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Health Assurance Hospitals Company(DHAMAN)" \
                       "\n2. Kuwait Society of Engineers(KSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Medical Speciality Board(OMSB)" \
                       "\n2. Oman Society of Engineers(OSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '6':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Ministry of Manpower Singapore(MOMS)" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '7':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Community Developement Authority Dubai(CDAD)" \
                       "\n2. Department of Community Development Abu-Dhabi" \
                       "\n3. Department of Health Abu Dhabi(DOHAD)" \
                       "\n4. Dubai Corporation for Ambulance Service(DCAS)" \
                       "\n5. Dubai Health Authority(DHA)" \
                       "\n6. Ministry of Education UAE(MOE UAE)" \
                       "\n7. Ministry of Health and Prevention(MOH-AP)" \
                       "\n8. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n9. Social Services Department(SSD)" \
                       "\n\nPlease type the number from 1-9 to select the regulator body."
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name

            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name

            return cli_name
            
def already_existing_user_csdisable_client_hta(us_inp,user_in):
    if user_in == '1' or user_in == '2' or user_in == '3':
        if us_inp == '1':
            cli_name = bahrain_client_name
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name
            return  cli_name

        elif us_inp == '3':
            cli_name = dhaman_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = oman_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '6':
            cli_name = singapore_client_name
            return cli_name

        elif us_inp == '7':
            cli_name = dubai_client_name
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        
    elif user_in != '1' or user_in != '2' or user_in != '3':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n2. Ministry of works, Municipalities affairs and urban planning" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. National Center for complementary and alternative Medicine(NCCAM)" \
                       "\n2. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Health Assurance Hospitals Company(DHAMAN)" \
                       "\n2. Kuwait Society of Engineers(KSE)" \
                       "\n\nPlease type the number from 1 or 2 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Society of Engineers(OSE)" \
                       "\n\nPlease type the number from 1to select the regulator body."
            return cli_name

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '6':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Ministry of Manpower Singapore(MOMS)" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '7':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Community Developement Authority Dubai(CDAD)" \
                       "\n2. Department of Community Development Abu-Dhabi" \
                       "\n3. Department of Health Abu Dhabi(DOHAD)" \
                       "\n4. Dubai Corporation for Ambulance Service(DCAS)" \
                       "\n5. Dubai Health Authority(DHA)" \
                       "\n6. Ministry of Education UAE(MOE UAE)" \
                       "\n7. Ministry of Health and Prevention(MOH-AP)" \
                       "\n8. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n9. Social Services Department(SSD)" \
                       "\n\nPlease type the number from 1-9 to select the regulator body."
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name

def already_existing_user_csdisable_client_adv(us_inp,user_in):
    if user_in == '1' or user_in == '2' or user_in == '3':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain Ministry of Justice, Islamic Affairs and Waqf" \
                       "\n2. Council for Regulating the Practice of Engineering Professions" \
                       "\n3. Higher Education Council, Bahrain" \
                       "\n4. Ministry of Education Bahrain" \
                       "\n5. Ministry of Labour and Social Development, Bahrain" \
                       "\n6. Ministry of Works, Municipalities Affairs and Urban Planning Bahrain" \
                       "\n7. National Health Regulatory Authority - Bahrain (NHRA)" \
                       "\n\nPlease type the number from 1-7 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = saudi_client_name
            return  cli_name

        elif us_inp == '3':
            cli_name = dhaman_client_name
            return cli_name

        elif us_inp == '4':
            cli_name = oman_client_name
            return cli_name

        elif us_inp == '5':
            cli_name = qatar_client_name
            return cli_name

        elif us_inp == '6':
            cli_name = singapore_client_name
            return cli_name

        elif us_inp == '7':
            cli_name = dubai_client_name
            return cli_name

        elif us_inp == '8':
            cli_name = uk_client_name
            return cli_name

        elif us_inp == '9':
            cli_name = yemen_client_name
            return cli_name
        
    elif user_in != '1' or user_in != '2' or user_in != '3':
        if us_inp == '1':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Bahrain National Health Regulatory Authority(NHRA)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return cli_name

        elif us_inp == '2':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Saudi Commission for Health Specialities(SCFHS)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return  cli_name

        elif us_inp == '3':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Oman Medical Speciality Board(OMSB)" \
                       "\n\nPlease type the number from 1 to select the regulator body."
            return cli_name

        elif us_inp == '4':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar" \
                       "\n\nPlease type the number 1 to select the regulator body."
            return cli_name

        elif us_inp == '5':
            cli_name = "What's your Regulator's name?" \
                       "\n1. Department of Health Abu Dhabi(DOHAD)" \
                       "\n2. Dubai Health Authority(DHA)" \
                       "\n3. Ministry of Human Resources and Emiratisation(MOHRE)" \
                       "\n\nPlease type the number from 1-3 to select the regulator body."
            return cli_name

def cases_phone(cli_name, phone, email=None):
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone, email=None)
    temp = []
    if phone in df_main['TELEPHONENUMBER'].to_list():
        phn = df_main.loc[(df_main['CLIENT_NAME'] == cli_name) & (df_main['TELEPHONENUMBER'] == phone)]
        if not phn.empty:
            bar = phn['BARCODE'].to_list()
            a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
            a = a.to_list()
            status = []
            for i in range(len(a)):
                if a[i] == True:
                    stat = "Completed"
                    status.append(stat)
                else:
                    stat = "In Progress"
                    status.append(stat)          
            temp_list = []
            for i in range(len(bar)):
                barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                Casenumber = barcode['BARCODE']
                passport_number = barcode['PASSPORTCURRENTNO']
                link = "https://www.dataflowstatus.com/applicationstatus/validate_report?token=sed56gy&casenumber={}&passport={}".format(Casenumber.to_list()[0],passport_number.to_list()[0])
                # link = ps.Shortener().tinyurl.short(link)
                print(link)
                if i == 0 or bar[i] == bar[i-1]:
                    if i==0 or status[i] != status[i-1]:
                        temp = "{} : {} {}".format(bar[i],status[i],link)
                        temp_list.append(temp)
                else:
                    temp = "{} : {} {}".format(bar[i],status[i],link)
                    temp_list.append(temp)
                    
            if len(temp_list) > 0:
                temp_list.append("\nDo you have any other questions? (Y or N)")
                temp_list = "\n".join(temp_list)
                return temp_list
            
            else:
                msg = "No cases are linked to this phone number and client name. \nDo you have any other questions? (Y or N)"
                return msg

        else:
            msg = "No cases are linked to this phone number and client name \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this phone number \nDo you have any other questions? (Y or N)"
        return msg        

def linking_application(phone):
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone,email=None)
    if df_main is not None:
        for i in range(len(df_main)):
            case_complete_day =df_main['CASECOMPLETEDONDATE'][i].date()
            today_day = date.today()
            difference = today_day - case_complete_day
            overall_diff = difference.days
            if overall_diff <= 3:
                return "Dear user please wait for " + str(overall_diff) + " days, it  will be linked automatically on the portal. \n\nDo you have any other questions? (Y or N)"
            else:
                return "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    else:
        return "No any application found for your request."

def linking_application_email(email):
    email = email.lower()
    df_main = server_email(email)
    if df_main is not None:
        for i in range(len(df_main)):
            case_complete_day =df_main['CASECOMPLETEDONDATE'][i].date()
            today_day = date.today()
            difference = today_day - case_complete_day
            overall_diff = difference.days
            if overall_diff <= 3:
                return "Dear user please wait for " + str(overall_diff) + " days because as per the process the report will linked automatically witinh 2 days on the portal. \n\nDo you have any other questions? (Y or N)"
            else:
                return "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                
    else:
        return "No any application found for your request."

def tech_error_email(email,inp,cli_name):
    if inp == '1':
        if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
            msg = "Please may I have the email address you are using for Login"
            return msg  
            
        elif cli_name != 'Dubai Health Authority' or cli_name != 'Department of Health, Abu Dhabi' or cli_name != "Ministry of Health and Prevention":
            msg = "Please may I have the email address you are using for Login"
            return msg
        
        elif cli_name == "Ministry of Health and Prevention":
            link = "https://mohap.gov.ae/en/help/contact-us"
            msg = "Please visit : {} and raise your concern regarding login. \n\nDo you have any other questions? (Y or N)".format(link)
            return msg
             
    elif inp == '2':
        if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
            msg = linking_application_email(email)
            return msg
        
    elif inp == '3':
        if cli_name != '':
            msg = "Are you using Google chrome browser for login?\nPlease type Y or N"
            return msg
        
    elif inp == '4':
        if cli_name != '':
            msg = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            return msg
                
    else:
        msg = "Please type values from 1 to 4"
        return msg     
def cases_email(cli_name,email,passport_number):
    passport_number = passport_number.upper()
    email = email.lower()
    df_main = server_email(email)
    temp = []
    if email in df_main['PERSONALMAILID'].to_list():
        emll = df_main.loc[(df_main['CLIENT_NAME'] == cli_name) & (df_main['PERSONALMAILID'].str.lower() == email)]
        if not emll.empty:
            eml = emll.loc[(emll['PASSPORTCURRENTNO'].str.upper() == passport_number) & (emll['PERSONALMAILID'] == email)]
            if not eml.empty:
                bar = eml['BARCODE'].to_list()
                a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
                a = a.to_list()
                status = []
                for i in range(len(a)):
                    if a[i] == True:
                        stat = "Completed"
                        status.append(stat)
                    else:
                        stat = "In Progress"
                        status.append(stat)    
                temp_list = []
                for i in range(len(bar)):
                    barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                    Casenumber = barcode['BARCODE']
                    passport_number = barcode['PASSPORTCURRENTNO']
                    link = "https://www.dataflowstatus.com/applicationstatus/validate_report?token=sed56gy&casenumber={}&passport={}".format(Casenumber.to_list()[0],passport_number.to_list()[0])
                    # link = ps.Shortener().tinyurl.short(link)
                    print(link)
                    if i == 0 or bar[i] == bar[i-1]:
                        if i==0 or status[i] != status[i-1]:
                            temp = "{} : {} {}".format(bar[i],status[i],link)
                            temp_list.append(temp)
                    else:
                        temp = "{} : {} {}".format(bar[i],status[i],link)
                        temp_list.append(temp)
                if len(temp_list)>0:
                    temp_list.append("\nDo you have any other questions? (Y or N)")
                    temp_list = "\n".join(temp_list)
                    return temp_list 
                else:
                    msg = "No cases are linked to this email address and passport number. \nDo you have any other questions? (Y or N)"
                    return msg
            else:
                msg = "No cases are linked to this email address and passport number.  \nDo you have any other questions? (Y or N)"
                return msg
        else:
            msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this email address.  \nDo you have any other questions? (Y or N)"
        return msg

def multiple_case_number(phone, case_number_by_user):
    phone = '+' + phone
    phone = get_country(phone)
    df_main_multiple_cases = server_multiple_case(phone,case_number_by_user)
    if df_main_multiple_cases is not None:
        case_number = df_main_multiple_cases['BARCODE'].to_list()[0]
        temp = []
        if case_number is not None:   
            bar = case_number
            temp_list = []       
            Casenumber = bar
            passport_number = df_main_multiple_cases['PASSPORTCURRENTNO'][0]
            greet = 'To check the status of your application or to download the report, please click the link below.\n\n'
            link = "www.dataflowstatus.com"
            temp = "{}{} : {}".format(greet,Casenumber,link)
            temp_list.append(temp)
            temp_list.append("\nDo you have any other questions? (Y or N)")
            temp_list = "\n".join(temp_list)
            return temp_list
        else:
            msg = "No cases are linked to this phone number and client name \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this Case Number \nDo you have any other questions? (Y or N)"
        return msg

def multiple_case_number_email(email, case_number_by_user):
    email = email.lower()
    df_main_multiple_cases_email = server_multiple_case_email(email,case_number_by_user)
    if df_main_multiple_cases_email is not None:
        case_number = df_main_multiple_cases_email['BARCODE'].to_list()[0]
        temp = []
        if case_number is not None:   
            bar = case_number
            temp_list = []       
            Casenumber = bar
            passport_number = df_main_multiple_cases_email['PASSPORTCURRENTNO'][0]
            greet = 'To check the status of your application or to download the report, please click the link below.\n\n'
            link = "\nwww.dataflowstatus.com"
            temp = "{}{} : {}".format(greet,Casenumber,link)
            temp_list.append(temp)
            temp_list.append("\nDo you have any other questions? (Y or N)")
            temp_list = "\n".join(temp_list)
            return temp_list
        else:
            msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this Case Number \nDo you have any other questions? (Y or N)"
        return msg

def cases_phone_new(phone, email=None):
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone, email=None)
    temp = []
    if phone in df_main['TELEPHONENUMBER'].to_list():
        phn = df_main.loc[(df_main['TELEPHONENUMBER'] == phone)]
        if not phn.empty:
            bar = phn['BARCODE'].to_list()
            a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
            a = a.to_list()
            status = []
            for i in range(len(a)):
                if a[i] == True:
                    stat = "Completed"
                    status.append(stat)
                else:
                    stat = "In Progress"
                    status.append(stat)          
            temp_list = []
            if len(bar) <= 5 :
                for i in range(len(bar)):
                    barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                    link = "www.dataflowstatus.com"
                    greet1 = '\nTo check the status of your application or to download the report, please click the following link : '+ link
                    greet = 'Here you go.\n\n'
                    if i == 0 or bar[i] == bar[i-1]:
                        if i==0 or status[i] != status[i-1]:
                            temp = "{}{} : {}".format(greet,bar[i],status[i])
                            temp_list.append(temp)
                    else:
                        temp = "{} : {}".format(bar[i],status[i])
                        temp_list.append(temp)
                if len(temp_list) > 0:
                    temp_list.append(greet1 +"\n\nDo you have any other questions? (Y or N)")
                    temp_list = "\n".join(temp_list)
                    return temp_list 
                else:
                    msg = "No cases are linked to this phone number and client name. \nDo you have any other questions? (Y or N)"
                    return msg
            else:
                msg = "You have multiple cases with us, so please let us know which one you want to check the status of by typing the Case Number"
                
                return msg 
        else:
            msg = "No cases are linked to this phone number and client name \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this phone number \nDo you have any other questions? (Y or N)"
        return msg

def cases_email_new(email,passport_number):
    passport_number = passport_number.upper()
    email = email.lower()
    df_main = server_email(email)
    temp = []
    if email in df_main['PERSONALMAILID'].to_list():
        emll = df_main.loc[(df_main['PERSONALMAILID'].str.lower() == email)]
        if not emll.empty:
            eml = emll.loc[(emll['PASSPORTCURRENTNO'].str.upper() == passport_number) & (emll['PERSONALMAILID'] == email)]
            if not eml.empty:
                bar = eml['BARCODE'].to_list()
                a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
                a = a.to_list()
                status = []
                for i in range(len(a)):
                    if a[i] == True:
                        stat = "Completed"
                        status.append(stat)
                    else:
                        stat = "In Progress"
                        status.append(stat)    
                temp_list = []
                if len(bar) <= 5 :
                    for i in range(len(bar)):
                        barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                        link = "www.dataflowstatus.com"
                        greet1 = '\nTo check the status of your application or to download the report, please click the following link : '+ link
                        greet = 'Here you go.\n\n'
                        if i == 0 or bar[i] == bar[i-1]:
                            if i==0 or status[i] != status[i-1]:
                                temp = "{}{} : {}".format(greet,bar[i],status[i])
                                temp_list.append(temp)
                        else:
                            temp = "{} : {}".format(bar[i],status[i])
                            temp_list.append(temp)
                    if len(temp_list)>0:
                        temp_list.append(greet1 + "\n\nDo you have any other questions? (Y or N)")
                        temp_list = "\n".join(temp_list)
                        return temp_list 
                    else:
                        msg = "No cases are linked to this email address and passport number. \nDo you have any other questions? (Y or N)"
                        return msg
                else:
                    msg = "You have multiple cases with us, so please let us know which one you want to check the status of by typing the Case Number"
                    return msg
            else:
                msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
                return msg
        else:
            msg = "No cases are linked to this email address.  \nDo you have any other questions? (Y or N)"
            return msg

def cases_email_new_sharing(email,passport_number):
    passport_number = passport_number.upper()
    email = email.lower()
    df_main = server_email(email)
    temp = []
    if email in df_main['PERSONALMAILID'].to_list():
        emll = df_main.loc[(df_main['PERSONALMAILID'].str.lower() == email)]
        if not emll.empty:
            eml = emll.loc[(emll['PASSPORTCURRENTNO'].str.upper() == passport_number) & (emll['PERSONALMAILID'] == email)]
            if not eml.empty:
                df_WIP = df_main.loc[df_main['CASE_STATUS'] == 'Insufficiency' ]
                # df_main['CASE_STATUS'] == 'Insufficiency'
                if not df_WIP.empty:
                    bar = df_WIP['BARCODE'].to_list()
                    a = (pd.to_datetime(df_WIP['CASECOMPLETEDONDATE'], errors='coerce').notnull())
                    a = a.to_list()
                    status = []
                    for i in range(len(a)):
                         if a[i] == False:
                            stat = "In Progress"
                            status.append(stat)      
                    temp_list = []
                    if len(bar) <= 5 :
                        for i in range(len(bar)):
                            barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                            link = "www.dataflowstatus.com"
                            greet1 = '\nPlease refer to the following link to submit the documents requested by us : '+ link
                            greet = 'Here you go.\n\n'
                            if i == 0 or bar[i] == bar[i-1]:
                                if i==0 or status[i] != status[i-1]:
                                    temp = "{}{} : {}".format(greet,bar[i],status[i])
                                    temp_list.append(temp)
                            else:
                                temp = "{} : {}".format(bar[i],status[i])
                                temp_list.append(temp)
                        if len(temp_list)>0:
                            temp_list.append(greet1 + "\n\nDo you have any other questions? (Y or N)")
                            temp_list = "\n".join(temp_list)
                            return temp_list 
                        else:
                            msg = "I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"
                            return msg
                else:
                    msg = "I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"
                    return msg
            else:
                msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
                return msg
        else:
            msg = "No cases are linked to this email address.  \nDo you have any other questions? (Y or N)"
            return msg

def cases_phone_new_sharing(phone, email=None):
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone, email=None)
    temp = []
    if phone in df_main['TELEPHONENUMBER'].to_list():
        phn = df_main.loc[(df_main['TELEPHONENUMBER'] == phone)]
        if not phn.empty:
                df_WIP = df_main.loc[df_main['CASE_STATUS'] == 'Insufficiency' ]
                # df_main['CASE_STATUS'] == 'Insufficiency'
                if not df_WIP.empty:
                    bar = df_WIP['BARCODE'].to_list()
                    a = (pd.to_datetime(df_WIP['CASECOMPLETEDONDATE'], errors='coerce').notnull())
                    a = a.to_list()
                    status = []
                    for i in range(len(a)):
                         if a[i] == False:
                            stat = "In Progress"
                            status.append(stat)      
                    temp_list = []
                    if len(bar) <= 5 :
                        for i in range(len(bar)):
                            barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                            link = "www.dataflowstatus.com"
                            greet1 = '\nPlease refer to the following link to submit the documents requested by us : '+ link
                            greet = 'Here you go.\n\n'
                            if i == 0 or bar[i] == bar[i-1]:
                                if i==0 or status[i] != status[i-1]:
                                    temp = "{}{} : {}".format(greet,bar[i],status[i])
                                    temp_list.append(temp)
                            else:
                                temp = "{} : {}".format(bar[i],status[i])
                                temp_list.append(temp)
                        if len(temp_list)>0:
                            temp_list.append(greet1 + "\n\nDo you have any other questions? (Y or N)")
                            temp_list = "\n".join(temp_list)
                            return temp_list 
                        else:
                            msg = "I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"
                            return msg
                else:
                    msg = "I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"
                    return msg
        else:
            msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this email address.  \nDo you have any other questions? (Y or N)"
        return msg

def case_name():
  link = "www.dataflowstatus.com"
  msg = "Please visit : {} to check the status for your DataFlow application.\n\nDo you have any other questions? (Y or N)".format(link)
  return msg

def application_ques(cli_name):
    if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
        msg = "Select the issue you are facing: \n\n1. Logging issue \n2. Linking of application \n3. Unable to submit application \n4. Others \n\nSelect the query by choosing the relevant number from 1-4"
        return msg
    
    elif cli_name != 'Dubai Health Authority' or cli_name != 'Department of Health, Abu Dhabi':
        msg = "Select the issue you are facing: \n\n1. Logging issue \n2. Unable to submit application \n3. Others \n\nSelect the query by choosing the relevant number from 1-3"
        return msg

def tech_error(phone,inp,cli_name):
    if inp == '1':
        if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
            msg = "Please may I have the email address you are using for Login"
            return msg  
            
        elif cli_name != 'Dubai Health Authority' or cli_name != 'Department of Health, Abu Dhabi' or cli_name != "Ministry of Health and Prevention":
            msg = "Please may I have the email address you are using for Login"
            return msg
        
        elif cli_name == "Ministry of Health and Prevention":
            link = "https://mohap.gov.ae/en/help/contact-us"
            msg = "Please visit : {} and raise your concern regarding login. \n\nDo you have any other questions? (Y or N)".format(link)
            return msg
             
    elif inp == '2':
        if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
            msg = linking_application(phone)
            return msg
        
    elif inp == '3':
        if cli_name != '':
            msg = "Are you using Google chrome browser for login?\nPlease type Y or N"
            return msg
        
    elif inp == '4':
        if cli_name != '':
            msg = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            return msg
                
    else:
        msg = "Please type values from 1 to 4"
        return msg

def tech_error_dha(inp,cli_name):
    if inp == '1':
        if cli_name == 'Dubai Health Authority' or cli_name == 'Department of Health, Abu Dhabi':
            msg = "Please may I have the email address you are using for Login?"
            return msg

        elif cli_name == "Ministry of Health and Prevention":
            link = "https://mohap.gov.ae/en/help/contact-us"
            msg = "Please visit : {} and raise your concern regarding login. \n\nDo you have any other questions? (Y or N)".format(link)
            return msg
                       
        else:
            msg ="Please may I have the email address you are using for Login?"
            return msg
                   
    elif inp == '2':
        if cli_name != '':
            msg = "Are you using Google chrome browser for login?\nPlease type Y or N"
            return msg
        
    elif inp == '3':
        if cli_name != '':
            msg = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            return msg
                    
    else:
        msg = "Please type values from 1 to 3"
        return msg

def tech_error_ques(tick_inp,inp,cli_name):
    if tick_inp.lower() == 'y':
        if inp == '6':
            if cli_name != "":
                msg = 'Please share your query in details with us with a screenshot here.'
                return msg   
        else:
            if cli_name != "":
                msg = 'Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. '
                return msg         
    elif tick_inp.lower() == 'n':
        msg = "Do you have any other query? (Y or N)"
        return msg
    else:
        msg = "Please enter Y or N"
        return msg
            
def tech_error_ques_dha(tick_inp,inp,cli_name):
    if tick_inp.lower() == 'y':
        if inp == '5':
            if cli_name != "":
                msg = 'Please share your query in details with us with a screenshot here.'
                return msg              
        else:
            if cli_name != "":
                msg = 'Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. '
                return msg
            
    elif tick_inp.lower() == 'n':
        msg = "Do you have any other query? (Y or N)"
        return msg 
    else:
        msg = "Please enter Y or N"
        return msg
                                              
def additional_document(cli_name):
    cn = cli_name
    if cn == 'Saudi Commission for Health Specialities(SCFHS)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000123510-saudi-commission-for-health-specialities-scfhs-'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Dubai Health Authority(DHA)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000123511-dubai-health-authority-dha-'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000123512-department-of-healthcare-practitioners-ministry-of-public-health-the-state-of-qatar'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Department of Health Abu Dhabi(DOHAD)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000123513-department-of-health-abu-dhabi-dohad-'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Oman Medical Speciality Board(OMSB)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000123514-oman-medical-speciality-board-omsb-'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Bahrain National Health Regulatory Authority(NHRA)':
        link = 'https://support.dataflowgroup.com/support/solutions/articles/17000129896-bahrain-national-health-regulatory-authority-nhra-'
        msg = msg_find_detailed_process.format(link)
        return msg

    else:
        msg = 'Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. '
        return msg
      
def htw_cli(cli_name):
    if cli_name == 'Bahrain National Health Regulatory Authority(NHRA)' or cli_name == 'Saudi Commission for Health Specialities(SCFHS)' or cli_name == 'Department of Health Abu Dhabi(DOHAD)' or cli_name == 'Dubai Health Authority(DHA)':
        msg = "How would you like to access the information: \n1. Video \n2. Documented steps \n\nSelect the query by choosing the relevant number from 1 or 2"
        return msg
      
    elif cli_name == 'Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar':
        link = 'https://www.youtube.com/watch?v=AgXiP6Q7eWE'
        vip_link = 'https://www.dataflowgroup.com/vip/'
        msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
        return msg

    else:
        cn = cli_name
        if cn == 'Community Developement Authority Dubai(CDAD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Corporation for Ambulance Service(DCAS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103544/English-DCAS-Final.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Health Assurance Hospitals Company(DHAMAN)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2018/05/22090445/DHAMAN-How-to-Apply-En.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Kuwait Society of Engineers(KSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/09/01120408/DataFlow-How-to-Apply-EN1.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Health and Prevention(MOH-AP)':
            link = 'https://mohap.gov.ae/en'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Manpower Singapore(MOMS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/09071115/MOM_-_How_To_Apply.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Oman Medical Speciality Board(OMSB)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/10/05140145/How-to-Apply-OMSB.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Oman Society of Engineers(OSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/07/20102944/How-to-Apply-for-OSE-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Department of Community Development Abu-Dhabi':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Social Services Department(SSD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103914/SSSD-Step-by-Step-Application-Guide.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Education UAE(MOE UAE)':
            link = 'https://www.dataflowgroup.com/verification-services/education/ministry-of-education-uae/'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'National Center for complementary and alternative Medicine(NCCAM)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/04/13111024/National-Center-for-Complementary-and-Alternative-Medicine-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of works, Municipalities affairs and urban planning':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/03/15090646/Ministry-of-Works-Municipalities-Affairs-and-Urban-Planning-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg

def htw_clii(cli_name):
    cn = cli_name
    if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/bahrain/ministry-of-justice-islamic-affairs-and-waqf/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Council for Regulating the Practice of Engineering Professions':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/stem/the-council-for-regulating-the-practice-of-engineering-professions/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Higher Education Council, Bahrain':
        link = 'https://www.dataflowgroup.com/verification-services/education/higher-education-council-bahrain/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Education Bahrain':
        link = 'https://www.dataflowgroup.com/verification-services/education/higher-education-council-bahrain/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Labour and Social Development, Bahrain':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/manpower-staffing/ministry-of-labour-bahrain/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/community-development/ministry-of-works-municipalities-affairs-and-urban-planning/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/national-health-regulatory-authority/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'National Center for Complementary and Alternative Medicine':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/national-center-for-complementary-and-alternative-medicine/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Saudi Commission for Health Specialties':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/saudi-commission-for-health-specialties/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'DHAMAN':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/health-assurance-hospitals-company-dhaman/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Kuwait Society of Engineers':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/stem/kuwait-society-of-engineers/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Oman Medical Specialty Board':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/oman-medical-specialty-board/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Oman Society of Engineers':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/stem/oman-society-of-engineers/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/qatar-council-for-healthcare-practitioners/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Manpower, Singapore':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/manpower-staffing/ministry-of-manpower-singapore/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Community Development Authority':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/community-development/community-development-authority-cda/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Department of Community Development Abu Dhabi':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/community-development/department-of-community-development-abu-dhabi/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Department of Health, Abu Dhabi':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/department-of-health-abu-dhabi/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Dubai Corporation For Ambulance Services':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/dubai-corporation-for-ambulance-services/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Dubai Health Authority':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/dubai-health-authority/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Education UAE':
        link = 'https://www.dataflowgroup.com/verification-services/education/ministry-of-education-uae/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Ministry of Health and Prevention':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/ministry-of-health-and-prevention/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Sharjah Health Authority':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/sharjah-health-authority/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Social Services Department Sharjah':
        link = 'https://www.dataflowgroup.com/verification-services/start-your-verification/community-development/sharjah-social-services-department/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'General Medical Council United Kingdom':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/general-medical-council/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Yemeni Supreme Medical Council':
        link = 'https://www.dataflowgroup.com/verification-services/healthcare/the-yemeni-supreme-medical-council/'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    else:
        msg = 'Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. '
        return msg
      
def htw_case(inp,cli_name):
    cn = cli_name
    if inp == '1':
        if cn == 'Bahrain National Health Regulatory Authority(NHRA)':
            link = 'https://www.youtube.com/watch?v=gXONFeT_K-4'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Department of Health Abu Dhabi(DOHAD)':
            link = 'https://www.youtube.com/watch?v=Xr8jtkTcQRA'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Health Authority(DHA)':
            link = 'https://www.youtube.com/watch?v=Xr8jtkTcQRA'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Saudi Commission for Health Specialities(SCFHS)':
            link = 'https://www.youtube.com/watch?v=5HxbDLQlz0M'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        else:
            if cn == 'Oman Medical Speciality Board(OMSB)':
                vip_link = 'https://www.dataflowgroup.com/vip/'
                msg = "Video not available for this client \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(vip_link)
                return msg
            
            else:
                msg = "Video not available for this client \n\nDo you have any other questions? (Y or N)"
                return msg
        
    elif inp == '2':
        if cn == 'Bahrain National Health Regulatory Authority(NHRA)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2019/02/11111838/NHRA-How-To-Apply.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Community Developement Authority Dubai(CDAD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Department of Health Abu Dhabi(DOHAD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/06064935/DoH-FAQ.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Corporation for Ambulance Service(DCAS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103544/English-DCAS-Final.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Health Authority(DHA)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/09064424/DHA_-_How_To_Apply.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Health Assurance Hospitals Company(DHAMAN)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2018/05/22090445/DHAMAN-How-to-Apply-En.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Kuwait Society of Engineers(KSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/09/01120408/DataFlow-How-to-Apply-EN1.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Health and Prevention(MOH-AP)':
            link = 'https://mohap.gov.ae/en'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Manpower Singapore(MOMS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/09071115/MOM_-_How_To_Apply.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Oman Medical Speciality Board(OMSB)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/10/05140145/How-to-Apply-OMSB.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Oman Society of Engineers(OSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/07/20102944/How-to-Apply-for-OSE-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        
        elif cn == 'Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar':
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Document not available for this client \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(vip_link)
            return msg
        
        elif cn == 'Saudi Commission for Health Specialities(SCFHS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/02/22085431/Applicant-Kit-SCFHS.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Department of Community Development Abu-Dhabi':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Social Services Department(SSD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103914/SSSD-Step-by-Step-Application-Guide.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Education UAE(MOE UAE)':
            link = 'https://www.dataflowgroup.com/verification-services/education/ministry-of-education-uae/'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'National Center for complementary and alternative Medicine(NCCAM)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/04/13111024/National-Center-for-Complementary-and-Alternative-Medicine-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of works, Municipalities affairs and urban planning':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/03/15090646/Ministry-of-Works-Municipalities-Affairs-and-Urban-Planning-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        else:
            msg = "Document not available for this client \n\nDo you have any other questions? (Y or N)"
            return msg
    
    else:
        msg = "wrong input, please enter a valid input"
        return msg

def htw_case_doc(inp,cli_name):
    cn = cli_name
    if inp == '1':
        if cn == 'Bahrain National Health Regulatory Authority(NHRA)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2019/02/11111838/NHRA-How-To-Apply.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Community Developement Authority Dubai(CDAD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Department of Health Abu Dhabi(DOHAD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/06064935/DoH-FAQ.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Corporation for Ambulance Service(DCAS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103544/English-DCAS-Final.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Dubai Health Authority(DHA)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/09064424/DHA_-_How_To_Apply.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Health Assurance Hospitals Company(DHAMAN)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2018/05/22090445/DHAMAN-How-to-Apply-En.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Kuwait Society of Engineers(KSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/09/01120408/DataFlow-How-to-Apply-EN1.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Health and Prevention(MOH-AP)':
            link = 'https://mohap.gov.ae/en'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Manpower Singapore(MOMS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2017/01/09071115/MOM_-_How_To_Apply.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Oman Medical Speciality Board(OMSB)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/10/05140145/How-to-Apply-OMSB.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Oman Society of Engineers(OSE)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/07/20102944/How-to-Apply-for-OSE-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar':
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Document not available for this client \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(vip_link)
            return msg
        
        elif cn == 'Saudi Commission for Health Specialities(SCFHS)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/02/22085431/Applicant-Kit-SCFHS.pdf'
            vip_link = 'https://www.dataflowgroup.com/vip/'
            msg = "Tap on the link to redirect to the page : {} \n\nPlease note that we provide VIP Virtual Assistance Service where we provide end to end PSV solutions, i.e., from application submission to expedited completion of the application. You may connect with us via video call or voice call as per your preferred time. For more information please refer to : {} \n\nDo you have any other questions? (Y or N)".format(link,vip_link)
            return msg
        
        elif cn == 'Department of Community Development Abu-Dhabi':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2020/08/10101521/Department-of-Community-Development-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Social Services Department(SSD)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/11/09103914/SSSD-Step-by-Step-Application-Guide.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of Education UAE(MOE UAE)':
            link = 'https://www.dataflowgroup.com/verification-services/education/ministry-of-education-uae/'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'National Center for complementary and alternative Medicine(NCCAM)':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2021/04/13111024/National-Center-for-Complementary-and-Alternative-Medicine-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        elif cn == 'Ministry of works, Municipalities affairs and urban planning':
            link = 'https://d1oi3s9sr6ymrv.cloudfront.net/wp-content/uploads/2022/03/15090646/Ministry-of-Works-Municipalities-Affairs-and-Urban-Planning-HOW-TO-APPLY-EN.pdf'
            msg = msg_tap_link.format(link)
            return msg
        
        else:
            msg = "Document not available for this client \n\nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "wrong input, please enter a valid input"
        return msg

def report_transfer(cli_name):
    cn = cli_name
    if cn == 'Saudi Commission for Health Specialities(SCFHS)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000122466-saudi-commission-for-health-specialities-scfhs-'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Dubai Health Authority(DHA)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000122467'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000122468-department-of-healthcare-practitioners-ministry-of-public-health-the-state-of-qatar'
        msg = msg_find_detailed_process.format(link)
        return msg

    elif cn == 'Department of Health Abu Dhabi(DOHAD)':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000122469-department-of-health-abu-dhabi-dohad-'
        msg = msg_find_detailed_process.format(link)
        return msg
    
    elif cn == 'Oman Medical Specialty Board':
        link = 'https://dataflowgroup.freshdesk.com/support/solutions/articles/17000121508-report-transfer-process'
        msg = msg_find_detailed_process.format(link)
        return msg
    else:
        msg = 'Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. '
        return msg

def refund(cli_name):
    msg = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    return msg

def retrieve_phone( phone, email=None):
    # phone = phone[2:]
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone, email=None)
    temp = []
    if phone in df_main['TELEPHONENUMBER'].to_list():
        phn = df_main.loc[(df_main['TELEPHONENUMBER'] == phone)]
        if not phn.empty:
            bar = phn['BARCODE'].to_list()
            a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
            a = a.to_list()
            status = []
            for i in range(len(a)):
                if a[i] == True:
                    stat = "Completed"
                    status.append(stat)
                else:
                    stat = "In Progress"
                    status.append(stat)

            temp_list = []
            for i in range(len(bar)):
                barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                Casenumber = barcode['BARCODE']
                passport_number = barcode['PASSPORTCURRENTNO']
                if i == 0 or bar[i] == bar[i-1]:
                    if i==0 or status[i] != status[i-1]:
                        temp = "{} : {}".format(bar[i],status[i])
                        temp_list.append(temp)
                else:
                    temp = "{} : {}".format(bar[i],status[i])
                    temp_list.append(temp)

            if len(temp_list) > 0:
                temp_list.append("\nDo you have any other questions? (Y or N)")
                temp_list = "\n".join(temp_list)
                return temp_list          
            else:
                msg = "No cases are linked to this phone number and client name. \nDo you have any other questions? (Y or N)"
                return msg
        else:
            msg = "No cases are linked to this phone number and client name \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this phone number \nDo you have any other questions? (Y or N)"
        return msg        

def retrieve_phone_new(phone, email=None):
    # phone = phone[2:]
    phone = '+' + phone
    phone = get_country(phone)
    df_main = server(phone, email=None)
    temp = []
    if phone in df_main['TELEPHONENUMBER'].to_list():
        phn = df_main.loc[(df_main['TELEPHONENUMBER'] == phone)]
        if not phn.empty:
            bar = phn['BARCODE'].to_list()
            a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
            a = a.to_list()
            status = []
            for i in range(len(a)):
                if a[i] == True:
                    stat = "Completed"
                    status.append(stat)
                else:
                    stat = "In Progress"
                    status.append(stat)          
            temp_list = []
            for i in range(len(bar)):
                barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                Casenumber = barcode['BARCODE']
                passport_number = barcode['PASSPORTCURRENTNO']
                # link = "https://www.dataflowstatus.com/applicationstatus/validate_report?token=sed56gy&casenumber={}&passport={}".format(Casenumber.to_list()[0],passport_number.to_list()[0])
                # link = ps.Shortener().tinyurl.short(link)
                # print(link)
                if i == 0 or bar[i] == bar[i-1]:
                    if i==0 or status[i] != status[i-1]:
                        temp = "{} : {} {}".format(bar[i],status[i])
                        temp_list.append(temp)
                else:
                    temp = "{} : {} {}".format(bar[i],status[i])
                    temp_list.append(temp)
                    
            if len(temp_list) > 0:
                temp_list.append("\nDo you have any other questions? (Y or N)")
                temp_list = "\n".join(temp_list)
                return temp_list
            
            else:
                msg = "No cases are linked to this phone number and client name. \nDo you have any other questions? (Y or N)"
                return msg

        else:
            msg = "No cases are linked to this phone number and client name \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this phone number \nDo you have any other questions? (Y or N)"
        return msg

def retrieve_email(cli_name,email,passport_number):
    passport_number = passport_number.upper()
    df_main= server_email(email)
    temp = []
    if email in df_main['PERSONALMAILID'].to_list():
        emll = df_main.loc[(df_main['CLIENT_NAME'] == cli_name) & (df_main['PERSONALMAILID'] == email)]
        if not emll.empty:
            eml = emll.loc[(emll['PASSPORTCURRENTNO'].str.upper() == passport_number) & (emll['PERSONALMAILID'] == email)]
            if not eml.empty:
                bar = eml['BARCODE'].to_list()
                a = (pd.to_datetime(df_main['CASECOMPLETEDONDATE'], errors='coerce').notnull())
                a = a.to_list()
                status = []
                for i in range(len(a)):
                    if a[i] == True:
                        stat = "Completed"
                        status.append(stat)
                    else:
                        stat = "In Progress"
                        status.append(stat)    
                temp_list = []
                for i in range(len(bar)):
                    barcode = df_main.loc[df_main['BARCODE'] == bar[i]]
                    Casenumber = barcode['BARCODE']
                    passport_number = barcode['PASSPORTCURRENTNO']
                    if i == 0 or bar[i] == bar[i-1]:
                        if i==0 or status[i] != status[i-1]:
                            temp = "{} : {}".format(bar[i],status[i])
                            temp_list.append(temp)
                    else:
                        temp = "{} : {}".format(bar[i],status[i])
                        temp_list.append(temp)
                if len(temp_list)>0:
                    temp_list.append("\nDo you have any other questions? (Y or N)")
                    temp_list = "\n".join(temp_list)
                    return temp_list
                else:
                    msg = "No cases are linked to this email address and passport number. \nDo you have any other questions? (Y or N)"
                    return msg
            else:
                msg = "No cases are linked to this email address and passport number.  \nDo you have any other questions? (Y or N)"
                return msg
        else:
            msg = "No cases are linked to this email address and client name.  \nDo you have any other questions? (Y or N)"
            return msg
    else:
        msg = "No cases are linked to this email address.  \nDo you have any other questions? (Y or N)"
        return msg

def retrieve_name(cli_name):
    msg = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    return msg

def ques_refund(msg):
    if msg.lower() == 'n':
        msg = "Do you have any other query? (Y or N)"
        return msg
        
    elif msg.lower() == 'y':
        msg = "Dear Applicant, We have already created the support ticket for you and it has been assigned to one of our team members. You will soon receive an acknowledgement email for the same. \n\nDo you have any other query? (Y or N)"
        return msg
    
    else:
        msg = "wrong input"
        return msg

def ques_ask(msg):
    if msg.lower() == 'y':
      inp = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
      return inp
      
    elif msg.lower() == 'n':
      inp = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
      return inp
    
def other_ticket_creation():
    ticket_number = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(14)])
    link = 'https://support.dataflowgroup.com/support/home'
    msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_number) + link  + "\n\nDo you have any other query? (Y or N)"
    return msg

def ticket_creation(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,cf_problem_disposition,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_problem_disposition' : cf_problem_disposition,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }

    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def ticket_creation_adv(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }

    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def ticket_creation_refund(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,cf_problem_disposition,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_problem_disposition' : cf_problem_disposition,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }

    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def ticket_creation_ret(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,cf_problem_disposition,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_problem_disposition' : cf_problem_disposition,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }

    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def ticket_creation_clarification(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,cf_problem_disposition,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_problem_disposition' : cf_problem_disposition,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }
    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def ticket_creation_app(description, email,cf_dataflow_case_numbner,cf_commitment_date_given,cf_customer_type,cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow,subject,cf_closure_problem_types,cf_problem_disposition,status,priority,type,cf_licensing_authority_or_institution):
    payload = {
        'email': email,
        'subject': subject,
        'description': description ,
        'type' : type,
        'status': 2,
        'priority': 1,
        'custom_fields': {
            'cf_customer_type' : cf_customer_type,
            'cf_closure_problem_types' : cf_closure_problem_types,
            'cf_problem_disposition' : cf_problem_disposition,
            'cf_dataflow_case_numbner' : cf_dataflow_case_numbner,
            'cf_commitment_date_given': cf_commitment_date_given,
            'cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow': cf_dataflow_case_numbner,
            'cf_licensing_authority_or_institution' : cf_licensing_authority_or_institution
        }
    }
    headers = {'Content-Type': 'application/json'}
    url = 'https://dataflowgroup.freshdesk.com/api/v2/tickets'
    json_data = json.dumps(payload)
    response = requests.post(url, auth=('BxZbCQDOKkuJv348FY4W', 'X'), headers=headers, data=json_data)
    if response.status_code == 201:
        # Extract the ticket ID from the response
        ticket_id = response.json()["id"]
        link = 'https://support.dataflowgroup.com/support/home'
        msg = "Based on the information provided, we have created a support ticket on your behalf. {} has been assigned to one of our team members and they will get back to you soon. If you need to follow up on this ticket, please visit our support portal here: ".format(ticket_id) + link  + "\n\nDo you have any other query? (Y or N)"
        return msg
    else:
        msg = "We are sorry, but we could not create a ticket for you at this time. Please try again later.  {}".format(response.text)
        return msg

def phone_email(phone):
    phone = '+' + phone
    phone = get_country(phone)
    # phone = phone[2:]
    df_main = server(phone,email=None)
    if df_main is not None:
        if not df_main.loc[df_main['TELEPHONENUMBER'] == phone].empty:
            phn = df_main.loc[df_main['TELEPHONENUMBER'] == phone]
            emailss = phn['PERSONALMAILID']
            return emailss[0]
        else:
          emailss = 'atulkumar@dataflowgroup.com'
          return emailss[0]
    else:
      emailss = 'atulkumar@dataflowgroup.com'
    return emailss[0]

@csrf_exempt
def message(request):
    global count
    response = request.POST
    print(response)
    sender_name = response['ProfileName']
    sender_number = response['From']
    number = sender_number[10:]
    botlastmessage = WhatsappMessages.objects.filter(message_receiver = sender_number)
    botlastmessage = pd.DataFrame.from_records(botlastmessage.values())
    botlastmessage.to_csv('./bot/'+sender_number +'.csv')
    message = response['Body']
    print(message)
    MessageSid = response['MessageSid']
    receiver = response['To']
    
    WhatsappMessages.objects.create(message = message, sender_name = sender_name, sender_number = sender_number, MessageSid = MessageSid, message_receiver = response['To'],)
    
    try:
      last_query = WhatsappMessages.objects.filter(sender_number="whatsapp:+971503494337", message_receiver=sender_number).values().last()
      if last_query is not None:
          last_next_step = last_query['message']
          last_identifier = last_query['identifier']
      else:
          last_next_step = None
          last_identifier = None
    except:
      # pass
      last_query = None
      last_next_step = None
      last_identifier = None
      
    if message.lower() == "hello" or message.lower() == "hi" or message.lower() == "hii" or message.lower() == "hey":
        if last_query is not None:
            phone = last_query['message_receiver']
            phone = phone[10:]
        else:
            phone = number

        msg_sent = phone_validation(phone)
        returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = 'phone_validated'),
        
    ################################################## Case status ##############################################################
    elif last_next_step.startswith("Please may I have the email address you used to register with us?") or last_next_step.startswith(msg_for_email_validation):
        msg_sent = email_validation(message)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_received"),
        
    elif last_next_step.startswith("Please share your passport number."):
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        msg_sent = passport_validation(passport_number = message, email = user_email_msg.lower())
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "passport_received"),
    
    elif last_next_step.startswith("Please confirm your name") or last_next_step.startswith("Please enter the full name") or last_next_step.startswith(msg_name_required):
        msg_sent = names(message)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "name_received"),
    
    elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries" in last_next_step:
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
        user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
        user_passport_msg = user_passport[0]['message']
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg == '1' or last_user_msg == '7' or last_user_msg == '9':
            msg_sent = cases_email_new(email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '6' or last_user_msg == '8' or last_user_msg == '10' or  last_user_msg == '12' :
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '4' or last_user_msg == '5':
            msg_sent = "Please share your case number(xxxx-xxxx-xxxxxxx)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
          
        elif last_user_msg == '11':
            msg_sent = cases_email_new_sharing(email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        else:
            msg_sent = "Please enter number from 1 to 12."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),
            
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),
            
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country_email"),
            
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query"),
            
        elif message == "5":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query"),
    
        elif message == "6":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
            
        elif message == "7":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),
        
        elif message == "8":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
        
        elif message == "9":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),
            
        elif message == "10":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),

        elif message == "11":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),

        elif message == "12":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_email"),
    
    elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries" in last_next_step:
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg == '1' or last_user_msg == '7' or last_user_msg == '9' :
            msg_sent = cases_phone_new(phone = phone, email=None)
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '6' or last_user_msg == '8'  or last_user_msg == '10' or last_user_msg == '12' :
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '4' or last_user_msg == '5':
            msg_sent = "Please share your case number(xxxx-xxxx-xxxxxxx)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '11':
            msg_sent = cases_phone_new_sharing(phone, email=None)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )

        else:
            msg_sent = "Please enter number from 1 to 12"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        if message == "1" :
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
        
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_country"),
            
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country"),
            
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query_ini"),
            
        elif message == "5":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query_ini"),
    
        elif message == "6":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
            
        elif message == "7":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
        
        elif message == "8":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
        
        elif message == "9":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
            
        elif message == "10":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),

        elif message == "11":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),

        elif message == "12":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_email"),
    
    elif queries_for_name in last_next_step:
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        if last_user_msg == '1' or last_user_msg == '6':
            msg_sent = case_name()
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '5'  or last_user_msg == '7' or  last_user_msg == '9' or  last_user_msg == '11' :
            msg_sent = already_existing_user_name(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
        elif last_user_msg == '10':
            link = "www.dataflowstatus.com"
            greet1 = 'Please refer to the following link to submit the documents requested by us : '+ link + '\n\nDo you have any other questions? (Y or N)'
            msg_sent = greet1
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
            
        elif last_user_msg == '8' or last_user_msg == '4':
            msg_sent = already_existing_user_csdisable(user_in = message)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )

        else:
            msg_sent = "Please enter number from 1 to 11."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            )
         
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
      
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),
        
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Technical_error_name select issue query"),
      
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_clarification_name query"),
      
        elif message == "5":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "additional document"),
        
        elif message == "6":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
        
        elif message == "7":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_name"),
      
        elif message == "8":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
        
        elif message == "9":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
        
        elif message == "10":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),

        elif message == "11":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_name"),

    
    elif last_identifier == "case_status_link_email" and last_next_step.startswith('You have multiple cases with us, so please let us know which one you want to check the status of by typing the Case Number'):
        phone = last_query['message_receiver']
        phone = phone[10:]
        msg_sent = multiple_case_number_email(phone = phone, case_number_by_user = message)  
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
            )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "multiple_case_ticket_email"), 

    elif last_identifier == "case_status_link_name" and last_next_step.startswith("Please refer to the following link"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_name"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_name"),
    
    elif last_identifier == "case_status_link_name" and last_next_step.startswith('Please refer to the'):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_name"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_name"),




    elif last_identifier == "validation(y/n)_identifier_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_name"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_name"),
    
    
    elif last_identifier == "case_status_link_email" and last_next_step.startswith("Here you go."):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_email"),
    
    elif last_identifier == "case_status_link_email" and last_next_step.startswith('Please find the detailed process here'):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_email"),

    elif last_identifier == "case_status_link_email" and last_next_step.startswith("I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_email"),

    elif last_identifier =='validation(y/n)_identifier_email':   
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier_email"),
            
    elif last_identifier == "create_ticket_or_return_email":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg= WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_name_msg = None
        # try:
        #     user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
        #     user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
        #     user_name_msg = user_name[0]['message']

        # except:
        #     pass

        if last_user_msg == '1':
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_email"),  

        elif last_user_msg == '2':
            # if user_name_msg is None:
            msg_sent =  "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "trial"),
            # else:
            #     msg_sent =  queries_for_name
            #     returned_mesage = twilioclient.messages.create(
            #     from_=str(receiver),
            #     body= msg_sent,
            #     to=str(sender_number)
            #     )
            #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "trial"),
        else:
            msg_sent = 'Please type either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),    
    

    elif last_identifier == "create_ticket_or_return_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg= WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        if last_user_msg == '1':
            msg_sent = already_existing_user_name(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_name"),  

        elif last_user_msg == '2':
            msg_sent =  queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
        else:
            msg_sent = 'Please type either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_name"),    

        
    elif last_identifier == "case_status_country":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'

    
    elif  last_identifier == 'case status regulator name' and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),

    elif  last_identifier == 'case status regulator name_validation':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(identifier ='case status regulator name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),

        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation"),


    elif last_identifier == "detailed description":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro"),
            
    elif last_identifier == 'individual/pro':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']

        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_phone",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  case status"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  general"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  sharing"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  retrieve dataflow case"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report reissuance"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report copy"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1"),

    elif last_identifier == 'individual/pro1':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_phone",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report reissuance"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1"),

    elif last_identifier == "query_ques_case_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),


#########################CASE STATUS - EMAIL################
    elif last_identifier == "case_status_country_email":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_email"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
    
    elif  last_identifier == 'case status regulator name_email' and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),



    elif  last_identifier == 'case status regulator name_name' and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),

    elif  last_identifier == 'case status regulator name_validation_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(identifier ='case status regulator name_email',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),

        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_email"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_email"),
    
    elif  last_identifier == 'case status regulator name_validation_name':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])

        user_user_id = WhatsappMessages.objects.filter(identifier ='case status regulator name_name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description_name"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_validation_name"),

    elif last_identifier == "detailed description_email":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro_email"),
    
    elif last_identifier == "detailed description_name":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro_name"),
        
    elif last_identifier == 'individual/pro_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro_email", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description_email",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']

        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_email",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country_email",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']

        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report reissuance"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1_email"),

    elif last_identifier == 'individual/pro_name':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']

        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_name",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country_name",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']

        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report reissuance"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1_name"),

    elif last_identifier == 'individual/pro1_name':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']

        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_name",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country_name",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']

        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                # msg_sent = "query selected bu user = " + query_selected_by_user_others + "and query selected bu user = " + query_selected_by_user + "  report reissuance"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_name"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1_name"),

    elif last_identifier == 'individual/pro1_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual/pro_email", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status regulator name_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "detailed description_email",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']

        user_query_msg1 = WhatsappMessages.objects.filter(identifier = "case_status_link_email",message_receiver = sender_number).values('id').last()
        user_query1 = WhatsappMessages.objects.filter(id = int(user_query_msg1['id']) - 1 ).values()
        query_selected_by_user = user_query1[0]['message']

        user_query_others1 = WhatsappMessages.objects.filter(identifier = "case_status_country_email",message_receiver = sender_number).values('id').last()
        user_query_others2 = WhatsappMessages.objects.filter(id = int(user_query_others1['id']) - 1 ).values()
        query_selected_by_user_others = user_query_others2[0]['message']

        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            if  query_selected_by_user_others == '1' and query_selected_by_user == '1':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

            elif query_selected_by_user_others == '12':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'General Queries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
            
            elif query_selected_by_user_others == '1' and query_selected_by_user == '11':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Sharing Documents', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

            elif query_selected_by_user_others == '1' and query_selected_by_user == '9':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Retrieve DataFlow case number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '10':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),
                   
            elif query_selected_by_user_others == '1' and query_selected_by_user == '7':
                msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report copy request', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro1_email"),

    elif last_identifier == "query_ques_case_ini_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_name_msg = None
        # try:
        #     user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
        #     user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
        #     user_name_msg = user_name[0]['message']
        # except:
        #     pass

        if last_user_msg.lower() == 'y':
            # if user_name_msg is None:
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),
            # else:
            #     msg_sent = queries_for_name
            #     returned_mesage = twilioclient.messages.create(
            #     from_=str(receiver),
            #     body= msg_sent,
            #     to=str(sender_number)
            #     )
            #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_email"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_email"),

    elif last_identifier == "query_ques_case_ini_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_name"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini_phone"),
   
   
    ######################## case status - Phone #############################
    
    elif last_identifier == "case_status_link_phone" and last_next_step.startswith('You have multiple cases with us, so please let us know which one you want to check the status of by typing the Case Number'):
        phone = last_query['message_receiver']
        phone = phone[10:]
        msg_sent = multiple_case_number(phone = phone, case_number_by_user = message)  
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
            )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "multiple_case_ticket"), 
    
    elif  last_identifier == 'case status regulator name_email' and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_email"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'

    elif  last_identifier == 'case status regulator name_email' and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_email"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'

    elif  last_identifier == 'case status regulator name_name' and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_name"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'




    elif last_identifier == "case_status_link_phone" and last_next_step.startswith("Here you go."):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier"),
    
    elif last_identifier == "case_status_link_phone" and last_next_step.startswith('Please find the detailed process here'):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier"),
    
    elif last_identifier == "case_status_link_phone" and last_next_step.startswith("I can see there are no pending cases with us. \nDo you have any other questions? (Y or N)"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier"),

    elif last_identifier =='validation(y/n)_identifier':   
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier"),

    elif last_identifier =='multiple_case_ticket':   
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(y/n)_identifier"),
            
    elif last_identifier == "create_ticket_or_return":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg == '1':
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country"),  
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_name"),
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(1/2)_identifier"),

    elif last_identifier == "validation(1/2)_identifier":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg == '1':
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country"),  
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_name"),
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "validation(1/2)_identifier"),
    
    elif  last_identifier == 'case status regulator name' and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10' :
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
                )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description"),
    
    elif  last_identifier == 'case status regulator name' and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'

    
################# case status -Name#############################


    elif last_identifier == "case_status_country_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case status regulator name_name"),
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
    
    elif last_identifier == "case status query 1 name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status query 1 name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "name_received").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        
        if queries_for_name in validation_msg:
            user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
            user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
            user_name_msg = user_name[0]['message']
            
            msg_sent = case_name()
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to case_status_name"),
    
    elif last_identifier == "other ques related to case_status_name":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_name"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "quess_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country_name"),
            
    elif last_identifier == "ques_ask_name":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_number_name"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Case_status_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == 'query_ques_number_name':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ct_name"),
    
    elif last_identifier == 'query_ques_ct_name':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ques_number_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ques_ct_name", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "case status query 1 name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to case_status_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_name"),
        
    elif last_identifier == "query_ques_case_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Case_status_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        
    ################################## Technical error ###########################################################
    
    
    elif last_identifier == "technical_error_country_email":
            phone = last_query['message_receiver']
            phone = phone[10:]
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
            user_user_msg = user_user[0]['message']
            
            msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_client_email"),
            
            if last_user_msg == "1":
              count_name = "Bahrain"
            elif last_user_msg == "2":
              count_name = 'KSA' 
            elif last_user_msg == "3":
              count_name = 'Kuwait'
            elif last_user_msg == "4":
              count_name = 'Oman' 
            elif last_user_msg == "5":
              count_name = 'Qatar' 
            elif last_user_msg == "6":
              count_name = 'Singapore' 
            elif last_user_msg == "7":
              count_name = 'UAE' 
            elif last_user_msg == "8":
              count_name = 'United Kingdom' 
            elif last_user_msg == "9":
              count_name = 'Yemen'

    elif last_identifier == "technical_error_client_email" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
    
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
          
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
    
    elif last_identifier == "technical_error_validation_email":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
          
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue_email"),
      
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation_email"),
    
    elif last_identifier == "technical_error_client_email" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_client_email"),
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'


    elif last_identifier == "technical_error_select_issue_email":
      user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email", message_receiver = sender_number).values('id').last()
      user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
      last_user_msg = user_cli[0]['message']
      
      user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
      user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
      user_inp_msg = user_inp[0]['message']
      
      stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue_email').values().last()
      validation_msg = stating_query['message']
      
      client_name = None
      if user_inp_msg == '1':
        if last_user_msg == '1':
            client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
              
        elif last_user_msg == '2':
            client_name = "Council for Regulating the Practice of Engineering Professions"
        
        elif last_user_msg == '3':
            client_name = "Higher Education Council, Bahrain"
              
        elif last_user_msg == '4':
            client_name = "Ministry of Education Bahrain"
            
        elif last_user_msg == '5':
            client_name = "Ministry of Labour and Social Development, Bahrain"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
            
        elif last_user_msg == '7':
            client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
          
      elif user_inp_msg == '2':
        if last_user_msg == '1':
            client_name = "National Center for Complementary and Alternative Medicine"
        
        elif last_user_msg == '2':
            client_name = "Saudi Commission for Health Specialties"
            
      elif user_inp_msg == '3':
        if last_user_msg == '1':
            client_name = "DHAMAN"
              
        elif last_user_msg == '2':
            client_name = "Kuwait Society of Engineers"
            
      elif user_inp_msg == '4':
        if last_user_msg == '1':
            client_name = "Oman Medical Specialty Board"
              
        elif last_user_msg == '2':
            client_name = "Oman Society of Engineers"
            
      elif user_inp_msg == '5':
        if last_user_msg == '1':
            client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
            
      elif user_inp_msg == '6':
        if last_user_msg == '1':
            client_name = "Ministry of Manpower, Singapore"
            
      elif user_inp_msg == '7':
        if last_user_msg == '1':
            client_name = "Community Development Authority"
              
        elif last_user_msg == '2':
            client_name = "Department of Community Development Abu Dhabi"
        
        elif last_user_msg == '3':
            client_name = "Department of Health, Abu Dhabi"
              
        elif last_user_msg == '4':
            client_name = "Dubai Corporation For Ambulance Services"
            
        elif last_user_msg == '5':
            client_name = "Dubai Health Authority"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Education UAE"
            
        elif last_user_msg == '7':
            client_name = "Ministry of Health and Prevention"
            
        elif last_user_msg == '8':
            client_name = "Sharjah Health Authority"
            
        elif last_user_msg == '9':
            client_name = "Social Services Department Sharjah"
            
      elif user_inp_msg == '8':
        if last_user_msg == '1':
            client_name = "General Medical Council United Kingdom"
            
      elif user_inp_msg == '9':
        if last_user_msg == '1':
            client_name = "Yemeni Supreme Medical Council"
      
      if validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Linking of application"):
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        msg_sent = tech_error_email(email = user_email_msg,inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification_email"),
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
    
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "linking_application_email"),
        
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit_email"),
        
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_email"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),

      elif validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Unable to submit application"):
          msg_sent = tech_error_dha(inp = message,cli_name = client_name)
          returned_mesage = twilioclient.messages.create(
          from_= str(receiver),
          body = msg_sent,
          to = str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification_email"),    
          
          if message == "1":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
      
          elif message == "2":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit_email"),
            
          elif message == "3":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_email"),
          else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
    
    
    elif last_identifier == "linking_application_email":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_email"),
    
    elif last_identifier == "unable_to_submit_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_for_submit_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit_email"),


    elif last_identifier == "asking_computer_for_submit_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "Have you filled all the fields which are required to submit the Application?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "required_fields_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use a Computer or a Laptop to login.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_for_submit_email"),
    
    elif last_identifier == "required_fields_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please fill all the required fields to submit your application.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "required_fields_email"),
    
    elif last_identifier == "email_for_verification_email" and last_next_step.startswith("Please may I have the email address you are using for Login"):
            msg_sent = email_verification(message)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_verification_email"),
    
    elif last_identifier == "email_for_verification_email" and last_next_step.startswith("Please visit"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_mohap_email"),

    
    elif last_identifier == "y/n_for_mohap_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_mohap_email"),



    elif last_identifier == "email_for_verification_email" and last_next_step.startswith("Please type values from 1 to 3"):

        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email", message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg = user_cli[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue_email').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
            
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
                
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
                
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
                
        elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
        elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
                
        elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
        elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
                
        elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
                
        elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
        elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
        
        msg_sent = tech_error_dha(inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification_email"),    
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
    
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit_email"),
        
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_email"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
      
    elif last_identifier == "email_for_verification_email" and last_next_step.startswith("Please type values from 1 to 4"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email", message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg = user_cli[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue_email').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
            
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
                
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
                
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
                
        elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
        elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
                
        elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
        elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
                
        elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
                
        elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
        elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
        
        msg_sent = tech_error_email(email = user_email_msg ,inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification_email"),    
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "linking_application_email"),
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit_email"),
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_email"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification_email"),
      
    elif last_identifier == "email_verification_email":
        if last_next_step.startswith("Are you using Google chrome browser for login?\nPlease type Y or N"):
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            if last_user_msg.lower() == 'y':
                msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_email"),
                        
            elif last_user_msg.lower() == 'n':
                msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

            else:
                msg_sent = "Please enter 'Y' or 'N'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_chrome_email"),
    
        elif last_next_step.startswith("Dear Applicant, Please use the same email id which has been used during the registration process.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"):
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            if last_user_msg.lower() == 'y':
                msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
            
            else:
                msg_sent = "Please enter 'Y' or 'N'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_tech_email"),

    elif last_identifier == 'y/n_for_chrome_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_chrome_email"),
        

    elif last_identifier == 'y/n_for_tech_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
        
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_tech_email"),
                        

    elif last_identifier == 'asking_computer_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "Have you tried selecting 'Forgot Password' option to receive a temporary password to login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "forgot_password_email"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use a Computer or a Laptop to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_email"),
    
    elif last_identifier == "use_chrome_browser_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
                msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                          
        elif last_user_msg.lower() == 'n':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
        
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),
                

    elif last_identifier == 'forgot_password_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
        
        elif last_user_msg.lower() == 'n':
            user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg = user_cli[0]['message']
        
            if user_inp_msg == '7' and last_user_msg == '3':
                link = 'https://www.dfdoh.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

            elif user_inp_msg == '6' and last_user_msg == '1':
                link = 'www.dfmoms.com'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),
            
            elif user_inp_msg == '7' and last_user_msg == '5':
                link = 'https://dha.dfgateway.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),
                
            else:
                link = 'https://www.dfgateway.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser_email"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "forgot_password_email"),
                      
    elif last_identifier == "ques_tech_ini_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_ini_email"),
                
    elif last_identifier == 'create_return_tech_email':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_email"),
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country_email"),

        elif last_user_msg != '1' and last_user_msg != '2':
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech_email"),

    elif last_identifier == "detailed_description_tech_email":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_email"),
    

    elif last_identifier == 'individual_pro_tech_email':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "individual_pro_tech_email", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = "NA", subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket_email"),
    
        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_email1"),

    elif last_identifier == 'individual_pro_tech_email1':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual_pro_tech_email", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = "NA", subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket_email"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_email1"),


    elif last_identifier == "email_for_verification_email":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_number_ini_email"),
    
      else:
      
          user_inp_id = WhatsappMessages.objects.filter(identifier = "email_for_verification_email", message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email", message_receiver = sender_number).values('id').last()
          user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
          last_user_msg = user_cli[0]['message']
          
          last_msg1 = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg1 = last_msg1['message']
          print(last_user_msg1)
          
          client_name = None
          if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
          
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
              
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
          elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
              
          elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                  
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
          elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                  
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
              
          elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
          elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
              
          elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                  
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                  
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                  
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
              
          elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
          elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
          
          if last_user_msg1.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_ini_email"),
            
          elif last_user_msg1.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
    elif last_identifier == 'query_tech_number_ini_email':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_ct_ini_email"),
    
    elif last_identifier == 'query_tech_ct_ini_email':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_tech_number_ini_email", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_tech_ct_ini_email", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client_email",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue_email",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket_ini_email"),
    
    elif last_identifier == "create ticket_ini_email":
    
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country_email"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
          
    elif last_identifier == "tech_last_TE_ini_email":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_number_ini_email"),
        
        elif last_next_step.startswith("Please share your query in details with us with a screenshot here"):
            msg_sent = "Basis the information provided you will soon receive an acknowledgement email for the same. \n\nDo you have any other query? (Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_technical_ini_email"),
            
            
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
          
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country_email"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
         
    elif last_identifier == "query_ques_technical_ini_email":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country_email"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        
        else:
            msg_sent = "Please type 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_technical_ini_email"),
        

    
    #################### Technical- Name ##################################
    
    elif last_identifier == "Technical_error_name select issue query":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_csdisable_client(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical error name query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
    
    elif last_identifier == "technical error name query 1":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical error name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'name_received').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
          
    
        if queries_for_name in validation_msg :
            msg_sent = application_ques(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "tech select issue name"),
  
    elif last_identifier == "tech select issue name":
      
      user_cli_id = WhatsappMessages.objects.filter(identifier = "tech select issue name", message_receiver = sender_number).values('id').last()
      user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
      last_user_msg = user_cli[0]['message']
      
      user_inp_id = WhatsappMessages.objects.filter(identifier = "technical error name query 1",message_receiver = sender_number).values('id').last()
      user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
      user_inp_msg = user_inp[0]['message']
      
      stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'tech select issue name').values().last()
      validation_msg = stating_query['message']
      
      client_name = None
      if user_inp_msg == '1':
        if last_user_msg == '1':
            client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
              
        elif last_user_msg == '2':
            client_name = "Council for Regulating the Practice of Engineering Professions"
        
        elif last_user_msg == '3':
            client_name = "Higher Education Council, Bahrain"
              
        elif last_user_msg == '4':
            client_name = "Ministry of Education Bahrain"
            
        elif last_user_msg == '5':
            client_name = "Ministry of Labour and Social Development, Bahrain"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
            
        elif last_user_msg == '7':
            client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
          
      elif user_inp_msg == '2':
        if last_user_msg == '1':
            client_name = "National Center for Complementary and Alternative Medicine"
        
        elif last_user_msg == '2':
            client_name = "Saudi Commission for Health Specialties"
            
      elif user_inp_msg == '3':
        if last_user_msg == '1':
            client_name = "DHAMAN"
              
        elif last_user_msg == '2':
            client_name = "Kuwait Society of Engineers"
       
      elif user_inp_msg == '4':
        if last_user_msg == '1':
            client_name = "Oman Medical Specialty Board"
              
        elif last_user_msg == '2':
            client_name = "Oman Society of Engineers"
            
      elif user_inp_msg == '5':
        if last_user_msg == '1':
            client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
            
      elif user_inp_msg == '6':
        if last_user_msg == '1':
            client_name = "Ministry of Manpower, Singapore"
            
      elif user_inp_msg == '7':
        if last_user_msg == '1':
            client_name = "Community Development Authority"
              
        elif last_user_msg == '2':
            client_name = "Department of Community Development Abu Dhabi"
        
        elif last_user_msg == '3':
            client_name = "Department of Health, Abu Dhabi"
              
        elif last_user_msg == '4':
            client_name = "Dubai Corporation For Ambulance Services"
            
        elif last_user_msg == '5':
            client_name = "Dubai Health Authority"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Education UAE"
            
        elif last_user_msg == '7':
            client_name = "Ministry of Health and Prevention"
            
        elif last_user_msg == '8':
            client_name = "Sharjah Health Authority"
            
        elif last_user_msg == '9':
            client_name = "Social Services Department Sharjah"
            
      elif user_inp_msg == '8':
        if last_user_msg == '1':
            client_name = "General Medical Council United Kingdom"
            
      elif user_inp_msg == '9':
        if last_user_msg == '1':
            client_name = "Yemeni Supreme Medical Council"
    
      
      if validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Linking of application"):
          msg_sent = tech_error(phone = phone,inp = message,cli_name = client_name)
          returned_mesage = twilioclient.messages.create(
          from_= str(receiver),
          body = msg_sent,
          to = str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to technical_error"),
          
          if message == "1":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
      
          elif message == "2":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
            
          elif message == "3":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
            
          elif message == "4":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
            
          elif message == "5":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
          
          elif message == "6":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name query"),
  
      elif validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Unable to submit application"):
          msg_sent = tech_error_dha(inp = message,cli_name = client_name)
          returned_mesage = twilioclient.messages.create(
          from_= str(receiver),
          body = msg_sent,
          to = str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to technical_error"),
          
          if message == "1":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name_dha query"),
      
          elif message == "2":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name_dha query"),
            
          elif message == "3":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name_dha query"),
            
          elif message == "4":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name_dha query"),
            
          elif message == "5":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "TE_name_dha query"),
  
    elif last_identifier == "TE_name query":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):

          msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_name_number"),
      
      
      else:
      
          user_inp_id = WhatsappMessages.objects.filter(identifier = "TE_name query", message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          user_cli_id = WhatsappMessages.objects.filter(identifier = "tech select issue name", message_receiver = sender_number).values('id').last()
          user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
          last_user_msg = user_cli[0]['message']
          
          last_msg1 = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg1 = last_msg1['message']
          print(last_user_msg1)
          
          client_name = None
          if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
              
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
        
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
              
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
            
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
              
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
            
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
          
          elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
        
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
            
          elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
              
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
            
          elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
              
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
            
          elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
            
          elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
            
          elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
              
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
        
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
              
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
            
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
              
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
            
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
            
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
            
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
            
          elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
            
          elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
          
          
          if last_user_msg1.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_name"),
            
          elif last_user_msg1.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "ques_tech_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "tech_last_TE_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Technical_error_name select issue query"),
            
    elif last_identifier == "TE_name_dha query":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):

          msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_name_number"),
      
      
      else:
      
          user_inp_id = WhatsappMessages.objects.filter(identifier = "TE_name_dha query", message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          user_cli_id = WhatsappMessages.objects.filter(identifier = "tech select issue name", message_receiver = sender_number).values('id').last()
          user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
          last_user_msg = user_cli[0]['message']
          
          
          last_msg1 = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg1 = last_msg1['message']
          print(last_user_msg1)
          
          client_name = None
          if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
              
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
        
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
              
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
            
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
              
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
            
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
          
          elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
        
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
            
          elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
              
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
            
          elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
              
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
            
          elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
            
          elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
            
          elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
              
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
        
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
              
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
            
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
              
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
            
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
            
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
            
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
            
          elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
            
          elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
          
          if last_user_msg1.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_name"),
            
          elif last_user_msg1.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
  
    elif last_identifier == 'query_tech_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_name_ct"),
    
    elif last_identifier == 'query_tech_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_tech_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_tech_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical error name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "tech select issue name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
  
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket name"),
          
    elif last_identifier == "create ticket name":
          
      last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
      last_user_msg = last_msg['message']
      print(last_user_msg)
      
      if last_user_msg.lower() == 'y':
          msg_sent = queries_for_name
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Technical_error_name select issue query"),
          
          
      elif last_user_msg.lower() == 'n':
          msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

    elif last_identifier == "tech_last_TE_name":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_name_number"),
        
        elif last_next_step.startswith("Please share your query in details with us with a screenshot here"):
            msg_sent = "Basis the information provided you will soon receive an acknowledgement email for the same. \n\nDo you have any other query? (Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_technical_name"),
    
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
  
          last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg = last_msg['message']
          print(last_user_msg)
          
          if last_user_msg.lower() == 'y':
              msg_sent = queries_for_name
              returned_mesage = twilioclient.messages.create(
              from_=str(receiver),
              body= msg_sent,
              to=str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Technical_error_name select issue query"),
              
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_=str(receiver),
              body= msg_sent,
              to=str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),\
    
    elif last_identifier == "query_ques_technical_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Technical_error_name select issue query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
     #################### Technical- phone ################################## 
     
    elif last_identifier == "technical_error_country":
            phone = last_query['message_receiver']
            phone = phone[10:]
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
            user_user_msg = user_user[0]['message']
            
            msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_client"),
            
            if last_user_msg == "1":
              count_name = "Bahrain"
            elif last_user_msg == "2":
              count_name = 'KSA' 
            elif last_user_msg == "3":
              count_name = 'Kuwait'
            elif last_user_msg == "4":
              count_name = 'Oman' 
            elif last_user_msg == "5":
              count_name = 'Qatar' 
            elif last_user_msg == "6":
              count_name = 'Singapore' 
            elif last_user_msg == "7":
              count_name = 'UAE' 
            elif last_user_msg == "8":
              count_name = 'United Kingdom' 
            elif last_user_msg == "9":
              count_name = 'Yemen'

    elif last_identifier == "technical_error_client" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
    
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
          
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
    
    elif last_identifier == "technical_error_validation":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
          
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = application_ques(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_select_issue"),
      
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_validation"),
    
    elif last_identifier == "technical_error_client" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_client"),
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'


    elif last_identifier == "technical_error_select_issue":
      user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue", message_receiver = sender_number).values('id').last()
      user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
      last_user_msg = user_cli[0]['message']
      
      user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
      user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
      user_inp_msg = user_inp[0]['message']
      
      stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue').values().last()
      validation_msg = stating_query['message']
      
      client_name = None
      if user_inp_msg == '1':
        if last_user_msg == '1':
            client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
              
        elif last_user_msg == '2':
            client_name = "Council for Regulating the Practice of Engineering Professions"
        
        elif last_user_msg == '3':
            client_name = "Higher Education Council, Bahrain"
              
        elif last_user_msg == '4':
            client_name = "Ministry of Education Bahrain"
            
        elif last_user_msg == '5':
            client_name = "Ministry of Labour and Social Development, Bahrain"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
            
        elif last_user_msg == '7':
            client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
          
      elif user_inp_msg == '2':
        if last_user_msg == '1':
            client_name = "National Center for Complementary and Alternative Medicine"
        
        elif last_user_msg == '2':
            client_name = "Saudi Commission for Health Specialties"
            
      elif user_inp_msg == '3':
        if last_user_msg == '1':
            client_name = "DHAMAN"
              
        elif last_user_msg == '2':
            client_name = "Kuwait Society of Engineers"
            
      elif user_inp_msg == '4':
        if last_user_msg == '1':
            client_name = "Oman Medical Specialty Board"
              
        elif last_user_msg == '2':
            client_name = "Oman Society of Engineers"
            
      elif user_inp_msg == '5':
        if last_user_msg == '1':
            client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
            
      elif user_inp_msg == '6':
        if last_user_msg == '1':
            client_name = "Ministry of Manpower, Singapore"
            
      elif user_inp_msg == '7':
        if last_user_msg == '1':
            client_name = "Community Development Authority"
              
        elif last_user_msg == '2':
            client_name = "Department of Community Development Abu Dhabi"
        
        elif last_user_msg == '3':
            client_name = "Department of Health, Abu Dhabi"
              
        elif last_user_msg == '4':
            client_name = "Dubai Corporation For Ambulance Services"
            
        elif last_user_msg == '5':
            client_name = "Dubai Health Authority"
              
        elif last_user_msg == '6':
            client_name = "Ministry of Education UAE"
            
        elif last_user_msg == '7':
            client_name = "Ministry of Health and Prevention"
            
        elif last_user_msg == '8':
            client_name = "Sharjah Health Authority"
            
        elif last_user_msg == '9':
            client_name = "Social Services Department Sharjah"
            
      elif user_inp_msg == '8':
        if last_user_msg == '1':
            client_name = "General Medical Council United Kingdom"
            
      elif user_inp_msg == '9':
        if last_user_msg == '1':
            client_name = "Yemeni Supreme Medical Council"
      
      if validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Linking of application"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        msg_sent = tech_error(phone = phone,inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification"),
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
    
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "linking_application"),
        
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit"),
        
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_phone"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),

      elif validation_msg.startswith("Select the issue you are facing: \n\n1. Logging issue \n2. Unable to submit application"):
          msg_sent = tech_error_dha(inp = message,cli_name = client_name)
          returned_mesage = twilioclient.messages.create(
          from_= str(receiver),
          body = msg_sent,
          to = str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification"),    
          
          if message == "1":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
      
          elif message == "2":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit"),
            
          elif message == "3":
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_phone"),
          else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
    
    
    elif last_identifier == "linking_application":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_phone"),
    
    elif last_identifier == "unable_to_submit":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_for_submit"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit"),


    elif last_identifier == "asking_computer_for_submit":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "Have you filled all the fields which are required to submit the Application?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "required_fields"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use a Computer or a Laptop to login.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer_for_submit"),
    
    elif last_identifier == "required_fields":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please fill all the required fields to submit your application.\n\nI hope the given solution resolved your concern regarding the submit issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "required_fields"),
    
    elif last_identifier == "email_for_verification" and last_next_step.startswith("Please may I have the email address you are using for Login"):
            msg_sent = email_verification(message)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_verification"),
    
    elif last_identifier == "email_for_verification" and last_next_step.startswith("Please visit"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_mohap"),

    
    elif last_identifier == "y/n_for_mohap":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_mohap"),


    elif last_identifier == "email_for_verification" and last_next_step.startswith("Please type values from 1 to 3"):

        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue", message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg = user_cli[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
            
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
                
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
                
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
                
        elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
        elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
                
        elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
        elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
                
        elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
                
        elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
        elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
        
        msg_sent = tech_error_dha(inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification"),    
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
    
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit"),
        
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_phone"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
      
    elif last_identifier == "email_for_verification" and last_next_step.startswith("Please type values from 1 to 4"):
        phone = last_query['message_receiver']
        phone = phone[10:]

        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue", message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg = user_cli[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'technical_error_select_issue').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
            
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
                
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
                
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
                
        elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
        elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
                
        elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
        elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
                
        elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
                
        elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
        elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
        
        msg_sent = tech_error(phone = phone,inp = message,cli_name = client_name)
        returned_mesage = twilioclient.messages.create(
        from_= str(receiver),
        body = msg_sent,
        to = str(sender_number)
        )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "get_email_for_verification"),    
        
        if message == "1":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
        elif message == "2":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "linking_application"),
        elif message == "3":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "unable_to_submit"),
        elif message == "4":
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_phone"),
        else:
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "email_for_verification"),
      
    elif last_identifier == "email_verification":
        if last_next_step.startswith("Are you using Google chrome browser for login?\nPlease type Y or N"):
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            if last_user_msg.lower() == 'y':
                msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer"),
                        
            elif last_user_msg.lower() == 'n':
                msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

            else:
                msg_sent = "Please enter 'Y' or 'N'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_chrome"),
    
        elif last_next_step.startswith("Dear Applicant, Please use the same email id which has been used during the registration process.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"):
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            if last_user_msg.lower() == 'y':
                msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
            
            else:
                msg_sent = "Please enter 'Y' or 'N'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_tech"),

    elif last_identifier == 'y/n_for_chrome':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Are you using Desktop or Laptop for login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use the latest version of google chrome to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_chrome"),
        

    elif last_identifier == 'y/n_for_tech':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
        
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "y/n_for_tech"),
                        

    elif last_identifier == 'asking_computer':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
            msg_sent = "Have you tried selecting 'Forgot Password' option to receive a temporary password to login?\nPlease type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "forgot_password"),
                    
        elif last_user_msg.lower() == 'n':
            msg_sent = "Please use a Computer or a Laptop to login.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N) "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "asking_computer"),
    
    elif last_identifier == "use_chrome_browser":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        if last_user_msg.lower() == 'y':
                msg_sent = "Thank you for contacting the DataFlow Group.\n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                          
        elif last_user_msg.lower() == 'n':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
        
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),
                

    elif last_identifier == 'forgot_password':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
        
        elif last_user_msg.lower() == 'n':
            user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg = user_cli[0]['message']
        
            if user_inp_msg == '7' and last_user_msg == '3':
                link = 'https://www.dfdoh.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

            elif user_inp_msg == '6' and last_user_msg == '1':
                link = 'www.dfmoms.com'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),
            
            elif user_inp_msg == '7' and last_user_msg == '5':
                link = 'https://dha.dfgateway.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),
                
            else:
                link = 'https://www.dfgateway.com/'
                msg_sent = "Please visit : {} \nand select the forgot password option to request a temporary password using your registered email address.\n\nI hope the given solution resolved your concern regarding the Login issue(Y or N)".format(link)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "use_chrome_browser"),

        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "forgot_password"),
                      
    elif last_identifier == "ques_tech_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please enter 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_ini"),
                
    elif last_identifier == 'create_return_tech':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed_description_tech_phone"),
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Case_status_name query"),

        elif last_user_msg != '1' and last_user_msg != '2':
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_return_tech"),

    elif last_identifier == "detailed_description_tech_phone":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_phone"),
    

    elif last_identifier == 'individual_pro_tech_phone':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "individual_pro_tech_phone", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = "NA", subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket"),
    
        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_phone1"),

    elif last_identifier == 'individual_pro_tech_phone1':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "individual_pro_tech_phone", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = "NA", subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual_pro_tech_phone1"),


    elif last_identifier == 'create ticket':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please type 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket"),

    elif last_identifier == "email_for_verification":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_number_ini"),
    
      
      else:
      
          user_inp_id = WhatsappMessages.objects.filter(identifier = "email_for_verification", message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue", message_receiver = sender_number).values('id').last()
          user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
          last_user_msg = user_cli[0]['message']
          
          last_msg1 = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg1 = last_msg1['message']
          print(last_user_msg1)
          
          client_name = None
          if user_inp_msg == '1':
            if last_user_msg == '1':
                client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
            elif last_user_msg == '2':
                client_name = "Council for Regulating the Practice of Engineering Professions"
          
            elif last_user_msg == '3':
                client_name = "Higher Education Council, Bahrain"
                
            elif last_user_msg == '4':
                client_name = "Ministry of Education Bahrain"
              
            elif last_user_msg == '5':
                client_name = "Ministry of Labour and Social Development, Bahrain"
                
            elif last_user_msg == '6':
                client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
            elif last_user_msg == '7':
                client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
          elif user_inp_msg == '2':
            if last_user_msg == '1':
                client_name = "National Center for Complementary and Alternative Medicine"
            
            elif last_user_msg == '2':
                client_name = "Saudi Commission for Health Specialties"
              
          elif user_inp_msg == '3':
            if last_user_msg == '1':
                client_name = "DHAMAN"
                  
            elif last_user_msg == '2':
                client_name = "Kuwait Society of Engineers"
                
          elif user_inp_msg == '4':
            if last_user_msg == '1':
                client_name = "Oman Medical Specialty Board"
                  
            elif last_user_msg == '2':
                client_name = "Oman Society of Engineers"
              
          elif user_inp_msg == '5':
            if last_user_msg == '1':
                client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
                
          elif user_inp_msg == '6':
            if last_user_msg == '1':
                client_name = "Ministry of Manpower, Singapore"
              
          elif user_inp_msg == '7':
            if last_user_msg == '1':
                client_name = "Community Development Authority"
                  
            elif last_user_msg == '2':
                client_name = "Department of Community Development Abu Dhabi"
            
            elif last_user_msg == '3':
                client_name = "Department of Health, Abu Dhabi"
                  
            elif last_user_msg == '4':
                client_name = "Dubai Corporation For Ambulance Services"
                
            elif last_user_msg == '5':
                client_name = "Dubai Health Authority"
                  
            elif last_user_msg == '6':
                client_name = "Ministry of Education UAE"
                
            elif last_user_msg == '7':
                client_name = "Ministry of Health and Prevention"
                
            elif last_user_msg == '8':
                client_name = "Sharjah Health Authority"
                
            elif last_user_msg == '9':
                client_name = "Social Services Department Sharjah"
              
          elif user_inp_msg == '8':
            if last_user_msg == '1':
                client_name = "General Medical Council United Kingdom"
                
          elif user_inp_msg == '9':
            if last_user_msg == '1':
                client_name = "Yemeni Supreme Medical Council"
          
          if last_user_msg1.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_tech_ini"),
            
          elif last_user_msg1.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
    elif last_identifier == 'query_tech_number_ini':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_ct_ini"),
    
    elif last_identifier == 'query_tech_ct_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_tech_number_ini", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_tech_ct_ini", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "technical_error_client",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "technical_error_select_issue",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Technical Issue', cf_closure_problem_types = 'Technical Issues', cf_problem_disposition = 'DF Status Portal',status = 2, priority = 1, type = 'Technical error (issues with login / submitting a case / uploading document etc)',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create ticket_ini"),
    
    elif last_identifier == "create ticket_ini":
    
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
          
    elif last_identifier == "tech_last_TE_ini":
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_tech_number_ini"),
        
        elif last_next_step.startswith("Please share your query in details with us with a screenshot here"):
            msg_sent = "Basis the information provided you will soon receive an acknowledgement email for the same. \n\nDo you have any other query? (Y or N)"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_technical_ini"),
            
            
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
          
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
         
    elif last_identifier == "query_ques_technical_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "technical_error_country"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        
        else:
            msg_sent = "Please type 'Y' or 'N'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_technical_ini"),

    ############################################## Additional Document Verification - Email  ########################################################
    
    elif last_identifier == "ADV query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)

        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_client_adv(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Oman' 
        elif last_user_msg == "4":
          count_name = 'Qatar' 
        elif last_user_msg == "5":
          count_name = 'UAE' 
     
    elif last_identifier == "ADV query 1" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-5"):
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
              
          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation"),
                
        elif user_user_msg == '5':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation"),
    
    elif last_identifier == "adv_query_validation":
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
              
          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation"),
                
        elif user_user_msg == '5':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation"),
    
    elif last_identifier == "ADV query 1" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-5"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client_adv(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query 1"),
            
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Oman' 
        elif last_user_msg == "4":
          count_name = 'Qatar' 
        elif last_user_msg == "5":
          count_name = 'UAE' 
      
    elif last_identifier == "other question ADV":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
          
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

            else:
                msg_sent = "Please type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques adv_validation"),
    
       
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
          
            #msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct"),
     
    elif last_identifier == "Other ques adv_validation":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please type Y or N"):
          
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

            else:
                msg_sent = "Please type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques adv_validation"),
    
       
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
          
            #msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct"),
      
    elif last_identifier == "quess_adv":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_adv"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_validation"),
    
    elif last_identifier == "quess_adv_validation":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_adv"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_validation"),
    
    elif last_identifier == "ques_ask_adv":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == 'query_adv_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "other question ADV",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Bahrain National Health Regulatory Authority (NHRA)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '5':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Additional document verification', cf_closure_problem_types = 'Additional Document Verification',status = 2, priority = 1, type = 'I want to get an additional document verified',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV"),

        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV validation"),

    elif last_identifier == 'ADV validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "other question ADV",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Bahrain National Health Regulatory Authority (NHRA)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '5':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Additional document verification', cf_closure_problem_types = 'Additional Document Verification',status = 2, priority = 1, type = 'I want to get an additional document verified',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV"),

        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV validation"),
   
    elif last_identifier == "query_ques_ADV":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"), 
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_validation"),

    elif last_identifier == "query_ques_ADV_validation":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"), 
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_validation"),

    ########################### ADV -Name #############################
       
    elif last_identifier == "ADV_name query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)

        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_csdisable_client_adv(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV name query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Oman' 
        elif last_user_msg == "4":
          count_name = 'Qatar' 
        elif last_user_msg == "5":
          count_name = 'UAE'
  
    elif last_identifier == "ADV name query 1":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'name_received').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
              
          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        
        if queries_for_name in validation_msg :
            msg_sent = additional_document(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV_name"),
  
    elif last_identifier == "other question ADV_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
        
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_name"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
           
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
  
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_name_number"),
        
    elif last_identifier == "quess_adv_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_adv_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV_name query"),
     
    elif last_identifier == "ques_ask_adv_name":
      msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
      returned_mesage = twilioclient.messages.create(
      from_=str(receiver),
      body= msg_sent,
      to=str(sender_number)
       )
      WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_name_number"),
  
    elif last_identifier == 'query_adv_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_name_ct"),
    
    elif last_identifier == 'query_adv_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_adv_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_adv_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other question ADV_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Additional document verification', cf_closure_problem_types = 'Additional Document Verification',status = 2, priority = 1, type = 'I want to get an additional document verified',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_name"),
    
    elif last_identifier == "query_ques_ADV_name":
      last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
      last_user_msg = last_msg['message']
      print(last_user_msg)
      
      if last_user_msg.lower() == 'y':
          msg_sent = queries_for_name
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV_name query"),
          
          
      elif last_user_msg.lower() == 'n':
          msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"), 
          
    ###################################### ADV - Phone##############################################################
    
    elif last_identifier == "ADV query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)

        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client_adv(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query 1_ini"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Oman' 
        elif last_user_msg == "4":
          count_name = 'Qatar' 
        elif last_user_msg == "5":
          count_name = 'UAE' 
    
    elif last_identifier == "ADV query 1_ini" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-5"):
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
              
          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV_ini"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation_ini"),
                
        elif user_user_msg == '5':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV_ini"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation_ini"),
    
    elif last_identifier == "adv_query_validation_ini":
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
              
          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV_ini"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation_ini"),
                
        elif user_user_msg == '5':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = additional_document(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other question ADV_ini"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "adv_query_validation_ini"),
    
    elif last_identifier == "ADV query 1_ini" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-5"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client_adv(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query 1_ini"),
            
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Oman' 
        elif last_user_msg == "4":
          count_name = 'Qatar' 
        elif last_user_msg == "5":
          count_name = 'UAE' 
    
    elif last_identifier == "other question ADV_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
          
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_ini"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                
            else:
                msg_sent = "Please type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques adv_validation_ini"),
    
         
       
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
          
            #msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct_ini"),
    
    elif last_identifier == "Other ques adv_validation_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please type Y or N"):
          
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_ini"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
                
            else:
                msg_sent = "Please type Y or N"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques adv_validation_ini"),
    
         
       
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
          
            #msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct_ini"),
      
    elif last_identifier == "quess_adv_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_adv_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_validation_ini"),
    
    elif last_identifier == "quess_adv_validation_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_adv_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_adv_validation_ini"),
        
    elif last_identifier == "ques_ask_adv_ini":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_adv_ct_ini"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

    elif last_identifier == 'query_adv_ct_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct_ini", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "other question ADV_ini",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Bahrain National Health Regulatory Authority (NHRA)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '5':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Additional document verification', cf_closure_problem_types = 'Additional Document Verification',status = 2, priority = 1, type = 'I want to get an additional document verified',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_ini"),
        
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV validation_ini"),

    elif last_identifier == 'ADV validation_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_adv_ct_ini", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "ADV query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "other question ADV_ini",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Bahrain National Health Regulatory Authority (NHRA)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '5':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Additional document verification', cf_closure_problem_types = 'Additional Document Verification',status = 2, priority = 1, type = 'I want to get an additional document verified',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_ini"),
        
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV validation_ini"),

    elif last_identifier == "query_ques_ADV_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"), 
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_validation_ini"),

    elif last_identifier == "query_ques_ADV_validation_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ADV query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"), 
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ADV_validation_ini"),
    
    ################################################ How to Apply - Email#######################################################
    
    elif last_identifier == "HTA_country_email":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_regulator_name"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
          
    elif last_identifier == "HTA_email_regulator_name" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        # user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']

        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        # arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        # temp = []
        # for i in range(10):
        #     user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
        #     user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
        #     user_user_msg = user_user[0]['message']
        #     if user_user_msg in ["1", "2", "3", "4", "5", "6", "7","8","9","10"]:
        #         break
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_email_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
    
    elif last_identifier == "HTA_email_regulator_name" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_regulator_name"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
    
    elif last_identifier == "HTA regulator name_validation":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(identifier = 'HTA_email_regulator_name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        
        user_user_id = WhatsappMessages.objects.filter(identifier = 'HTA_email_regulator_name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_inp_msg = user_user[0]['message']
              
        if user_inp_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
                
        elif user_inp_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
    
        elif user_inp_msg == '2' or user_inp_msg == '3' or user_inp_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),

        elif user_inp_msg == '5' or user_inp_msg == '6' or user_inp_msg == '8' or user_inp_msg == '9':
            if last_user_msg == '1':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_refer_link"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA regulator name_validation"),
    
    elif last_identifier == "HTA_email_refer_link":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_create_ticket"),
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            else:
                msg_sent = "Please type either 'Y' or 'N'."
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_validation(y/n)_identifier"),
  
    elif last_identifier =='HTA_email_validation(y/n)_identifier':   
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_create_ticket"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_validation(y/n)_identifier"),
                 
    elif last_identifier == "HTA_email_create_ticket":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        # user_name_msg = None
        # try:
        #     user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
        #     user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
        #     user_name_msg = user_name[0]['message']
        # except:
        #     pass
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_detailed description"),  
        
        elif last_user_msg == '2':
            # if user_name_msg is None:
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries" 
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),       
            
            # else:
            #     msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-11 \n\n1. Case status \n2. How to apply \n3. Technical error  \n4. Report clarification \n5. Additional Document Verification \n6. Report copy request \n7. Report re-issuance queries \n8. Retrieve DataFlow case number \n9. Re-verification and appeal enquiries \n10. Sharing documents/information requested by DataFlow Team \n11. Others/General Queries" 
            #     returned_mesage = twilioclient.messages.create(
            #     from_=str(receiver),
            #     body= msg_sent,
            #     to=str(sender_number)
            #     )
            #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),       
                
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_validation(1/2)_identifier"),

    elif last_identifier == "HTA_email_detailed description":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_individual/pro"),
        
    elif last_identifier == "HTA_email_validation(1/2)_identifier":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        # user_name_msg = None
        # try:
        #     user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
        #     user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
        #     user_name_msg = user_name[0]['message']
        # except:
        #     pass
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_detailed description"),  
        
        elif last_user_msg == '2':
            # if user_name_msg is None:
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries" 
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),       

            # else:
            #     msg_sent = queries_for_name 
            #     returned_mesage = twilioclient.messages.create(
            #     from_=str(receiver),
            #     body= msg_sent,
            #     to=str(sender_number)
            #     )
            #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),       


        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_validation(1/2)_identifier"),

    elif last_identifier == "HTA_email_detailed description":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_individual/pro"),
    
    elif last_identifier == 'HTA_email_individual/pro':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "HTA_email_individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_email_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "HTA_email_refer_link",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'How to apply?', cf_closure_problem_types = 'Additional Document/Contact Information Shared by Applicant', status = 2, priority = 1, type = 'How to apply?',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_individual/pro1"),

    elif last_identifier == 'HTA_individual/pro1':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "HTA_email_individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_email_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "HTA_email_refer_link",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'How to apply?', cf_closure_problem_types = 'Additional Document/Contact Information Shared by Applicant', status = 2, priority = 1, type = 'How to apply?',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_ticket_created"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_individual/pro1"),

    elif last_identifier == "HTA_email_ticket_created":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        # user_name_msg = None
        # try:
        #     user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
        #     user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
        #     user_name_msg = user_name[0]['message']

        # except:
        #     pass
        
        if last_user_msg.lower() == 'y':
            # if user_name_msg is None:
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),
            # else:
            #     msg_sent = queries_for_name
            #     returned_mesage = twilioclient.messages.create(
            #     from_=str(receiver),
            #     body= msg_sent,
            #     to=str(sender_number)
            #     )
            #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_country_email"),
               
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_email_ticket_created"),
            
    ##################################################### How to Apply - Phone ###########################################
    
    elif last_identifier == "HTA_phone_country":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_regulator_name"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
          
    elif last_identifier == "HTA_phone_regulator_name" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        user_inp_id = WhatsappMessages.objects.filter(identifier = 'HTA_phone_regulator_name',message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']

        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
        
             
        if user_user_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),
                
        elif user_user_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),
    
        elif user_user_msg == '2' or user_user_msg == '3' or user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),

        elif user_user_msg == '5' or user_user_msg == '6' or user_user_msg == '8' or user_user_msg == '9':
            if last_user_msg == '1':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),
    
    elif last_identifier == "HTA_regulator_phone_name_validation":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        user_user_id = WhatsappMessages.objects.filter(identifier = 'HTA_phone_regulator_name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']

        client_name = None
        if user_user_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_user_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_user_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_user_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_user_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_user_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_user_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_user_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_user_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        
        user_user_id = WhatsappMessages.objects.filter(identifier = 'HTA_phone_regulator_name',message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_inp_msg = user_user[0]['message']
              
        if user_inp_msg == '1':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7':
                msg_sent = "Please type a number from 1 to 7 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),
                
        elif user_inp_msg == '7':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3' or last_user_msg != '4' or last_user_msg != '5' or last_user_msg != '6' or last_user_msg != '7' or last_user_msg != '8' or last_user_msg != '9' or last_user_msg != '10':
                msg_sent = "Please type a number from 1 to 10 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),
    
        elif user_inp_msg == '2' or user_inp_msg == '3' or user_inp_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),

            elif last_user_msg != '1' or last_user_msg != '2':
                msg_sent = "Please type number from 1 to 2 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),

        elif user_inp_msg == '5' or user_inp_msg == '6' or user_inp_msg == '8' or user_inp_msg == '9':
            if last_user_msg == '1':
                msg_sent = htw_clii(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_refer_link"),
                
            elif last_user_msg != '1':
                msg_sent = "Please enter 1 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_regulator_phone_name_validation"),

    elif last_identifier == "HTA_phone_regulator_name" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-9"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_regulator_name"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 

    elif last_identifier == "HTA_phone_refer_link":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_create_ticket"),
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            else:
                msg_sent = "Please type either 'Y' or 'N'."
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_validation(y/n)_identifier"),
  
    elif last_identifier =='HTA_phone_validation(y/n)_identifier':   
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_create_ticket"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_validation(y/n)_identifier"),
                 
    elif last_identifier == "HTA_phone_create_ticket":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_detailed description"),  
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_country"),       
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_validation(1/2)_identifier"),

    elif last_identifier == "HTA_phone_validation(1/2)_identifier":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_detailed description"),  
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_country"),       
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_validation(1/2)_identifier"),

    elif last_identifier == "HTA_phone_detailed description":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent =  "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_individual/pro"),
                 
    elif last_identifier == 'HTA_phone_individual/pro':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_refer_link",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'How to apply?', cf_closure_problem_types = 'Additional Document/Contact Information Shared by Applicant', status = 2, priority = 1, type = 'How to apply?',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_case_ini"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_individual/pro2"),

    elif last_identifier == 'HTA_individual/pro2':
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_individual/pro", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_regulator_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "HTA_phone_refer_link",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'How to apply?', cf_closure_problem_types = 'Additional Document/Contact Information Shared by Applicant', status = 2, priority = 1, type = 'How to apply?',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_ticket_created"),

        else:
            msg_sent = 'Please enter either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_individual/pro2"),

    elif last_identifier == "HTA_phone_ticket_created":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_phone_ticket_created"),
                  
    ##################### How to Apply - Name ###################################
    
    elif last_identifier == "HTA_name query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA query 1 name"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
    
    elif last_identifier == "HTA query 1 name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA query 1 name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "name_received").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        
        if queries_for_name in validation_msg:
            user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
            user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
            user_name_msg = user_name[0]['message']
            
            msg_sent = htw_clii(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques htw name"),
    
    elif last_identifier == "Other ques htw name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
        
            if last_user_msg.lower() == 'y':
                msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_htw_name"),
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_= str(receiver),
                body = msg_sent,
                to = str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
          
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
  
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_htw_number_name"),
          
    elif last_identifier == "quess_htw_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_htw_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_name query"),
      
    elif last_identifier == "ques_ask_htw_name":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_htw_number_name"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = queries_for_name
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_name query"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),             
                
    elif last_identifier == 'query_htw_number_name':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_htw_ct_name"),
    
    elif last_identifier == 'query_htw_ct_name':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_htw_number_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_htw_ct_name", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "HTA query 1 name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "Other ques htw name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'How to apply?', cf_closure_problem_types = 'Additional Document/Contact Information Shared by Applicant', status = 2, priority = 1, type = 'How to apply?',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_htw_name"),
        
    elif last_identifier == "query_ques_htw_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "HTA_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    ###################################################### Report transfer -Email #####################################################################
    
    elif last_identifier == "Report transfer query_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client_report(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report query 1_name"),
        
        
        if last_user_msg == "1":
          count_name = "KSA"
        elif last_user_msg == "2":
          count_name = 'Oman'
        elif last_user_msg == "3":
          count_name = 'Qatar'
        elif last_user_msg == "4":
          count_name = 'UAE'
        
    elif last_identifier == "Report transfer query_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client_report(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report query 1_name"),
        
        
        if last_user_msg == "1":
          count_name = "KSA"
        elif last_user_msg == "2":
          count_name = 'Oman'
        elif last_user_msg == "3":
          count_name = 'Qatar'
        elif last_user_msg == "4":
          count_name = 'UAE'
        
    elif last_identifier == "Report query 1" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-4"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
            
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation"),
    

    elif last_identifier == "Report query 1_name" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-4"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_name"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_name"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_name"),
    

    elif last_identifier == "Report_query_validation_name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_name"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_name"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_name"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_name"),
    
    elif last_identifier == "Report_query_validation":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        #report_transfer(cli_name = client_name)
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation"),
         
    elif last_identifier == "Report query 1" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-4"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = msg_sent = already_existing_user_client_report(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report query 1"),
        
        if last_user_msg == "1":
          count_name = "KSA"
        elif last_user_msg == "2":
          count_name = 'Oman'
        elif last_user_msg == "3":
          count_name = 'Qatar'
        elif last_user_msg == "4":
          count_name = 'UAE'
    
    elif last_identifier == "Other ques report":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation"),
  
             
              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
    
    elif last_identifier == "Other ques report_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_name"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation_name"),
  
             
              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
    

    elif last_identifier == "Other ques report_validation":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please type Y or N"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation"),
  
             
              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
           # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
    
    elif last_identifier == "Other ques report_validation_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please type Y or N"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_name"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation_name"),
  
             
              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
           # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
    
    elif last_identifier == "quess_report":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_report_transfer"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_validation"),
    
    elif last_identifier == "quess_report_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_report_transfer_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_name"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_validation"),
    
    elif last_identifier == "quess_report_validation":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_report_transfer"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_validation"),
    
    elif last_identifier == "ques_ask_report_transfer":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "ques_ask_report_transfer_name":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == 'query_report_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_report_ct", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_report_ct", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "Other ques report",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"  
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Transfer', cf_closure_problem_types = 'Report Transfer or Re-issue Request',status = 2, priority = 1, type = 'Report Transfer / Re-issuance of existing report to same / different regulator',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report"),
    
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "report validation"),

    elif last_identifier == 'report validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_report_ct", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_report_ct", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "Other ques report",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"  
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Transfer', cf_closure_problem_types = 'Report Transfer or Re-issue Request',status = 2, priority = 1, type = 'Report Transfer / Re-issuance of existing report to same / different regulator',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report"),
    
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "report validation"),

    elif last_identifier == "query_ques_report":
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_validation"),

    elif last_identifier == "query_ques_report_validation":
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_validation"),
    
     
    ##################################################### Report Transfer - Phone####################################
    
    elif last_identifier == "Report transfer query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client_report(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report query 1_ini"),
        
    elif last_identifier == "Report query 1_ini" and not last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-4"):
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_ini"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_ini"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_ini"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_ini"),
    
    elif last_identifier == "Report_query_validation_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
         
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"  
             
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   

        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Department of Health Abu Dhabi(DOHAD)"

          elif last_user_msg == '2':
              client_name = "Dubai Health Authority(DHA)"
              
          elif last_user_msg == '3':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_user_msg = user_inp[0]['message']
        
        if user_user_msg == '1' or user_user_msg == '2' or user_user_msg == '3':
            if last_user_msg == '1':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_ini"),

            elif last_user_msg != '1':
                msg_sent = "Please enter 1"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_ini"),
                
        elif user_user_msg == '4':
            if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3':
                msg_sent = report_transfer(cli_name = client_name)
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_ini"),

            elif last_user_msg != '1' or last_user_msg != '2' or last_user_msg != '3':
                msg_sent = "Please type a number from 1 to 3 "
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                    )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_query_validation_ini"),
    
    elif last_identifier == "Report query 1_ini" and last_next_step.startswith("Please choose Regulator's Country Name by typing values from 1-4"):
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        

        arr_length = len(WhatsappMessages.objects.filter(sender_number = sender_number).values('id'))
        temp = []
        for i in range(10):
            user_user_id = WhatsappMessages.objects.filter(sender_number = sender_number).values('id')[arr_length - 1 - i]
            user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) ).values()
            user_user_msg = user_user[0]['message']
            if user_user_msg in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                break
        msg_sent = msg_sent = already_existing_user_client_report(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report query 1_ini"),
        
        if last_user_msg == "1":
          count_name = "KSA"
        elif last_user_msg == "2":
          count_name = 'Oman'
        elif last_user_msg == "3":
          count_name = 'Qatar'
        elif last_user_msg == "4":
          count_name = 'UAE'
    
    elif last_identifier == "Other ques report_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please find the detailed process here"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_ini"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
             
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
                )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation_ini"),

              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
           # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct_ini"),
    
    elif last_identifier == "Other ques report_validation_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_next_step.startswith("Please type Y or N"):
          
          if last_user_msg.lower() == 'y':
              msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_ini"),
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_= str(receiver),
              body = msg_sent,
              to = str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
             
          else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
                )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Other ques report_validation_ini"),

              
        elif last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
           # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct_ini"),
    
    elif last_identifier == "quess_report_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_report_transfer_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_validation_ini"),
    
    elif last_identifier == "quess_report_validation_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_report_transfer_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
            
        else:
            msg_sent = 'Please type either 1 or 2.'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_report_validation_ini"),
       
    elif last_identifier == "ques_ask_report_transfer_ini":
      
        if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    
            # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_report_ct_ini"),
        
        elif last_next_step.startswith("Do you have any other query? (Y or N)"):
    
            last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
            last_user_msg = last_msg['message']
            print(last_user_msg)
            
            if last_user_msg.lower() == 'y':
                msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
                
                
            elif last_user_msg.lower() == 'n':
                msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
                returned_mesage = twilioclient.messages.create(
                from_=str(receiver),
                body= msg_sent,
                to=str(sender_number)
                 )
                WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == 'query_report_ct_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_report_ct_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_report_ct_ini", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "Other ques report_ini",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"  
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Transfer', cf_closure_problem_types = 'Report Transfer or Re-issue Request',status = 2, priority = 1, type = 'Report Transfer / Re-issuance of existing report to same / different regulator',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_ini"),
            
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "report validation_ini"),

    elif last_identifier == 'report validation_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        if last_user_msg == '1' or last_user_msg == '2':
        
            user_description_id = WhatsappMessages.objects.filter(identifier = "query_report_ct_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            # user_case_id = WhatsappMessages.objects.filter(identifier = "query_report_ct_ini", message_receiver = sender_number).values('id').last()
            # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
            # user_case_msg = user_case[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Report query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']
            
            user_cli_id = WhatsappMessages.objects.filter(identifier = "Other ques report_ini",message_receiver = sender_number).values('id').last()
            user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
            last_user_msg1 = user_cli[0]['message']
            
            
            client_name = None
            if user_inp_msg == '1':
                if last_user_msg1 == '1':
                    client_name = "Saudi Commission for Health Specialities (SCHS)"
            
            elif user_inp_msg == '2':
                if last_user_msg1 == '1':
                    client_name = "Oman Medical Speciality Board (OMSB)"  
            
            elif user_inp_msg == '3':
                if last_user_msg1 == '1':
                    client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
            
            elif user_inp_msg == '4':
                if last_user_msg1 == '1':
                    client_name = "Department of Health Abu Dhabi (DOHAD)"
            
                elif last_user_msg1 == '2':
                    client_name = "Dubai Health Authority (DHA)"
            
                elif last_user_msg1 == '3':
                    client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
            msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Transfer', cf_closure_problem_types = 'Report Transfer or Re-issue Request',status = 2, priority = 1, type = 'Report Transfer / Re-issuance of existing report to same / different regulator',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_ini"),
            
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "report validation_ini"),
        
    elif last_identifier == "query_ques_report_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_ini_validation"),

    elif last_identifier == "query_ques_report_ini_validation":
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report transfer query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_report_ini_validation"),
       
    ########################################################### Refund ########################################################################################################
    
    elif last_identifier == "Refund query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        
        msg_sentt = multiple_client_email(email = user_email_msg, case_number_by_user = message)
        if msg_sentt.startswith('We could not find your case number with us.'):
            msg_sent = msg_sentt
            
        else:
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query 1"),
        
        
        # if last_user_msg == "1":
        #   count_name = "Bahrain"
        # elif last_user_msg == "2":
        #   count_name = 'KSA' 
        # elif last_user_msg == "3":
        #   count_name = 'Kuwait'
        # elif last_user_msg == "4":
        #   count_name = 'Oman' 
        # elif last_user_msg == "5":
        #   count_name = 'Qatar' 
        # elif last_user_msg == "6":
        #   count_name = 'Singapore' 
        # elif last_user_msg == "7":
        #   count_name = 'UAE' 
        # elif last_user_msg == "8":
        #   count_name = 'United Kingdom' 
        # elif last_user_msg == "9":
        #   count_name = 'Yemen'
        
    elif last_identifier == "Refund query 1":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'passport_received').values().last()
        validation_msg = stating_query['message']
        
        # client_name = None
        # if user_inp_msg == '1':
        #   if last_user_msg == '1':
        #       client_name = "Bahrain National Health Regulatory Authority(NHRA)"
        #         
        #   elif last_user_msg == '2':
        #       client_name = "Ministry of works, Municipalities affairs and urban planning"
        # 
        # elif user_inp_msg == '2':
        #   if last_user_msg == '1':
        #       client_name = "National Center for complementary and alternative Medicine(NCCAM)"
        #   
        #   elif last_user_msg == '2':
        #       client_name = "Saudi Commission for Health Specialities(SCFHS)"
        #       
        # elif user_inp_msg == '3':
        #   if last_user_msg == '1':
        #       client_name = "Health Assurance Hospitals Company(DHAMAN)"
        #         
        #   elif last_user_msg == '2':
        #       client_name = "Kuwait Society of Engineers(KSE)"
        #       
        # elif user_inp_msg == '4':
        #   if last_user_msg == '1':
        #       client_name = "Oman Medical Speciality Board(OMSB)"
        #         
        #   elif last_user_msg == '2':
        #       client_name = "Oman Society of Engineers(OSE)"
        #       
        # elif user_inp_msg == '5':
        #   if last_user_msg == '1':
        #       client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
        #       
        # elif user_inp_msg == '6':
        #   if last_user_msg == '1':
        #       client_name = "Ministry of Manpower Singapore(MOMS)"
        #       
        # elif user_inp_msg == '7':
        #   if last_user_msg == '1':
        #       client_name = "Community Developement Authority Dubai(CDAD)"
        #         
        #   elif last_user_msg == '2':
        #       client_name = "Department of Community Development Abu-Dhabi"
        #   
        #   elif last_user_msg == '3':
        #       client_name = "Department of Health Abu Dhabi(DOHAD)"
        #         
        #   elif last_user_msg == '4':
        #       client_name = "Dubai Corporation for Ambulance Service(DCAS)"
        #       
        #   elif last_user_msg == '5':
        #       client_name = "Dubai Health Authority(DHA)"
        #         
        #   elif last_user_msg == '6':
        #       client_name = "Ministry of Education UAE(MOE UAE)"
        #       
        #   elif last_user_msg == '7':
        #       client_name = "Ministry of Health and Prevention(MOH-AP)"
        #       
        #   elif last_user_msg == '8':
        #       client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        #       
        #   elif last_user_msg == '9':
        #       client_name = "Social Services Department(SSD)"
        #       
        # elif user_inp_msg == '8':
        #   if last_user_msg == '1':
        #       client_name = "General Medical Council United Kingdom"
        #       
        # elif user_inp_msg == '9':
        #   if last_user_msg == '1':
        #       client_name = "Yemeni Supreme Medical Council"
        
      
        if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply" in validation_msg :
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund"),
    
    elif last_identifier == 'ticket refund':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = "Please select problem disposition for which you want refund: \n\n1. Application Cancelled Within 48 hours \n2. Duplicate Application Submitted \n3. Document Submitted Is Out of Scope \n4. Duplicate Payment \n5. Excess Payment \n6. Express Service Turn Around Time Not Fulfilled \n7. Wrong Profession Selected \n8. Wrong Client Selected \n9. Wrong Package Selection \n10. Others"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_prob"),

        else:
            msg_sent = "Please enter either 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund validation"),

        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        else:
          ct = "I am from a PRO/Agency"
          
    elif last_identifier == 'ticket refund validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = "Please select problem disposition for which you want refund: \n\n1. Application Cancelled Within 48 hours \n2. Duplicate Application Submitted \n3. Document Submitted Is Out of Scope \n4. Duplicate Payment \n5. Excess Payment \n6. Express Service Turn Around Time Not Fulfilled \n7. Wrong Profession Selected \n8. Wrong Client Selected \n9. Wrong Package Selection \n10. Others"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_prob"),
            
            ct = None
            if last_user_msg == '1':
              ct = "I am an individual APPLICANT"
           
            elif last_user_msg == '2':
              ct = "I am from a PRO/Agency"

        else:
            msg_sent = "Please enter either 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund validation"),
           
    elif last_identifier == 'query_refund_prob':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        if last_user_msg == '1' or  last_user_msg == '2' or  last_user_msg == '3' or  last_user_msg == '4' or  last_user_msg == '5' or  last_user_msg == '6' or  last_user_msg == '7' or  last_user_msg == '8' or  last_user_msg == '9':
            
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']

            # user_description_id = WhatsappMessages.objects.filter(identifier = "query_refund_number", message_receiver = sender_number).values('id').last()
            user_description_id = WhatsappMessages.objects.filter(identifier = "ticket refund", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            
            user_ct_id = WhatsappMessages.objects.filter(identifier = "query_refund_prob", message_receiver = sender_number).values('id').last()
            user_ct = WhatsappMessages.objects.filter(id = int(user_ct_id['id']) - 1 ).values()
            user_ct_msg = user_ct[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']

            cn = multiple_client_email(email = user_email_msg, case_number_by_user = user_inp_msg)
            client_name = None
            
            
            if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
                client_name = 'Ministry of Justice Bahrain (MOJBH)'
                
            elif cn == 'Council for Regulating the Practice of Engineering Professions':
                client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
                
            elif cn == 'Higher Education Council, Bahrain':
                client_name = 'Higher Education Council Bahrain (HECBH)'
                
            elif cn == 'Ministry of Education Bahrain':
                client_name = 'Ministry of Education Bahrain (MOEBH)'
                
            elif cn == 'Ministry of Labour and Social Development, Bahrain':
                client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'

            elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
                client_name = 'Other'
                
            elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
                client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
                
            elif cn == 'National Center for Complementary and Alternative Medicine':
                client_name = 'Other'
                
            elif cn == 'Saudi Commission for Health Specialties':
                client_name = 'Saudi Commission for Health Specialities (SCHS)'
                
            elif cn == 'DHAMAN':
                client_name = 'Health Assurance Hospitals Company (DHAMAN)'
                
            elif cn == 'Kuwait Society of Engineers':
                client_name = 'Kuwait Society of Engineers (KSE)'
                
            elif cn == 'Oman Medical Specialty Board':
                client_name = 'Oman Medical Speciality Board (OMSB)'
                
            elif cn == 'Oman Society of Engineers':
                client_name = 'Oman Society of Engineers (OSE)'
                
            elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
                client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
                
            elif cn == 'Ministry of Manpower, Singapore':
                client_name = 'Ministry of Manpower Singapore (MOMS)'
                
            elif cn == 'Community Development Authority':
                client_name = 'Community Development Authority Dubai (CDAD)'
                
            elif cn == 'Department of Community Development Abu Dhabi':
                client_name = 'Department of Community Development Abu Dhabi'
                
            elif cn == 'Department of Health, Abu Dhabi':
                client_name = 'Department of Health Abu Dhabi (DOHAD)'
                
            elif cn == 'Dubai Corporation For Ambulance Services':
                client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
                
            elif cn == 'Dubai Health Authority':
                client_name = 'Dubai Health Authority (DHA)'
                
            elif cn == 'Ministry of Education UAE':
                client_name = 'Ministry of Education UAE (MOE UAE)'
                
            elif cn == 'Ministry of Health and Prevention':
                client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
                
            elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
                client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
                
            elif cn == 'Sharjah Health Authority':
                client_name = 'Other'
                
            elif cn == 'Social Services Department Sharjah':
                client_name = 'Social Services Department (SSD)'
                
            elif cn == 'General Medical Council United Kingdom':
                client_name = 'General Medical Council UK (GMCUK)'
                
            elif cn == 'Yemeni Supreme Medical Council':
                client_name = 'Yemeni Supreme Medical Council(YSMC)'
                
            else:
                client_name = 'Other'
            
            
            ct = None
            if user_ct_msg == '1':
                ct = "I am an individual APPLICANT"
                
            elif user_ct_msg == '2':
                ct = "I am from a PRO/Agency"
            
            prob = None
            if last_user_msg == '1':
                prob = "Application Cancelled Within 48 hours"
            
            elif last_user_msg == '2':
                prob = "Duplicate Application Submitted"
            
            elif last_user_msg == '3':
                prob = "Document Submitted Is Out of Scope"
            
            elif last_user_msg == '4':
                prob = "Duplicate Payment"
            
            elif last_user_msg == '5':
                prob = "Excess Payment"
            
            elif last_user_msg == '6':
                prob = "Express Service Turn Around Time Not Fulfilled"
            
            elif last_user_msg == '7':
                prob = "Wrong Profession Selected"
                
            elif last_user_msg == '8':
                prob = "Wrong Client Selected"
            
            elif last_user_msg == '9':
                prob = "Wrong Package Selection"
                
            elif last_user_msg == '10':
                prob = "Others"
                
                
                
            msg_sent = ticket_creation_refund(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Refund Request', cf_closure_problem_types = 'Refund Request', cf_problem_disposition = prob,status = 2, priority = 1,type = 'Refund request',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund"),
            
        else:
            msg_sent = 'Please enter number from 1 to 9'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "disposition validation"),
            
    elif last_identifier == 'disposition validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        if last_user_msg == '1' or  last_user_msg == '2' or  last_user_msg == '3' or  last_user_msg == '4' or  last_user_msg == '5' or  last_user_msg == '6' or  last_user_msg == '7' or  last_user_msg == '8' or  last_user_msg == '9':
            
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']

            # user_description_id = WhatsappMessages.objects.filter(identifier = "query_refund_number", message_receiver = sender_number).values('id').last()
            user_description_id = WhatsappMessages.objects.filter(identifier = "ticket refund", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            
            user_ct_id = WhatsappMessages.objects.filter(identifier = "query_refund_prob", message_receiver = sender_number).values('id').last()
            user_ct = WhatsappMessages.objects.filter(id = int(user_ct_id['id']) - 1 ).values()
            user_ct_msg = user_ct[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']

            cn = multiple_client_email(email = user_email_msg, case_number_by_user = user_inp_msg)
            client_name = None
            
            
            if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
                client_name = 'Ministry of Justice Bahrain (MOJBH)'
                
            elif cn == 'Council for Regulating the Practice of Engineering Professions':
                client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
                
            elif cn == 'Higher Education Council, Bahrain':
                client_name = 'Higher Education Council Bahrain (HECBH)'
                
            elif cn == 'Ministry of Education Bahrain':
                client_name = 'Ministry of Education Bahrain (MOEBH)'
                
            elif cn == 'Ministry of Labour and Social Development, Bahrain':
                client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'

            elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
                client_name = 'Other'
                
            elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
                client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
                
            elif cn == 'National Center for Complementary and Alternative Medicine':
                client_name = 'Other'
                
            elif cn == 'Saudi Commission for Health Specialties':
                client_name = 'Saudi Commission for Health Specialities (SCHS)'
                
            elif cn == 'DHAMAN':
                client_name = 'Health Assurance Hospitals Company (DHAMAN)'
                
            elif cn == 'Kuwait Society of Engineers':
                client_name = 'Kuwait Society of Engineers (KSE)'
                
            elif cn == 'Oman Medical Specialty Board':
                client_name = 'Oman Medical Speciality Board (OMSB)'
                
            elif cn == 'Oman Society of Engineers':
                client_name = 'Oman Society of Engineers (OSE)'
                
            elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
                client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
                
            elif cn == 'Ministry of Manpower, Singapore':
                client_name = 'Ministry of Manpower Singapore (MOMS)'
                
            elif cn == 'Community Development Authority':
                client_name = 'Community Development Authority Dubai (CDAD)'
                
            elif cn == 'Department of Community Development Abu Dhabi':
                client_name = 'Department of Community Development Abu Dhabi'
                
            elif cn == 'Department of Health, Abu Dhabi':
                client_name = 'Department of Health Abu Dhabi (DOHAD)'
                
            elif cn == 'Dubai Corporation For Ambulance Services':
                client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
                
            elif cn == 'Dubai Health Authority':
                client_name = 'Dubai Health Authority (DHA)'
                
            elif cn == 'Ministry of Education UAE':
                client_name = 'Ministry of Education UAE (MOE UAE)'
                
            elif cn == 'Ministry of Health and Prevention':
                client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
                
            elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
                client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
                
            elif cn == 'Sharjah Health Authority':
                client_name = 'Other'
                
            elif cn == 'Social Services Department Sharjah':
                client_name = 'Social Services Department (SSD)'
                
            elif cn == 'General Medical Council United Kingdom':
                client_name = 'General Medical Council UK (GMCUK)'
                
            elif cn == 'Yemeni Supreme Medical Council':
                client_name = 'Yemeni Supreme Medical Council(YSMC)'
                
            else:
                client_name = 'Other'
            
            
            ct = None
            if user_ct_msg == '1':
                ct = "I am an individual APPLICANT"
                
            elif user_ct_msg == '2':
                ct = "I am from a PRO/Agency"
            
            prob = None
            if last_user_msg == '1':
                prob = "Application Cancelled Within 48 hours"
            
            elif last_user_msg == '2':
                prob = "Duplicate Application Submitted"
            
            elif last_user_msg == '3':
                prob = "Document Submitted Is Out of Scope"
            
            elif last_user_msg == '4':
                prob = "Duplicate Payment"
            
            elif last_user_msg == '5':
                prob = "Excess Payment"
            
            elif last_user_msg == '6':
                prob = "Express Service Turn Around Time Not Fulfilled"
            
            elif last_user_msg == '7':
                prob = "Wrong Profession Selected"
                
            elif last_user_msg == '8':
                prob = "Wrong Client Selected"
            
            elif last_user_msg == '9':
                prob = "Wrong Package Selection" 
                
            elif last_user_msg == '10':
                prob = "Others"
                
                
                
            msg_sent = ticket_creation_refund(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Refund Request', cf_closure_problem_types = 'Refund Request', cf_problem_disposition = prob,status = 2, priority = 1,type = 'Refund request',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund"),
            
        else:
            msg_sent = 'Please enter number from 1 to 9'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "disposition validation"),
            
    elif last_identifier == "other ques refund":  
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_validation"),

    elif last_identifier == "other ques refund_validation":  
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_validation"),

    ####################### Refund - Name ##############################
    
    
    elif last_identifier == "Refund_name query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        msg_sent = already_existing_user_csdisable_client(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund name query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
    
    elif last_identifier == "Refund name query 1":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'name_received').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
                
          elif last_user_msg == '2':
              client_name = "Ministry of works, Municipalities affairs and urban planning"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for complementary and alternative Medicine(NCCAM)"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Health Assurance Hospitals Company(DHAMAN)"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers(KSE)"
         
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers(OSE)"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower Singapore(MOMS)"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Developement Authority Dubai(CDAD)"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu-Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation for Ambulance Service(DCAS)"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority(DHA)"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE(MOE UAE)"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention(MOH-AP)"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Social Services Department(SSD)"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
        
        
        if queries_for_name in validation_msg :
            msg_sent = refund(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund_name"),
            
    elif last_identifier == "ticket refund_name":

        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_name_number"),
    
    elif last_identifier == 'query_refund_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_name_ct"),
    
    elif last_identifier == 'query_refund_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        msg_sent = "Please select problem disposition for which you want refund: \n\n1. Application Cancelled Within 48 hours \n2. Duplicate Application Submitted \n3. Document Submitted Is Out of Scope \n4. Duplicate Payment \n5. Excess Payment \n6. Express Service Turn Around Time Not Fulfilled \n7. Wrong Profession Selected \n8. Wrong Client Selected \n9. Wrong Package Selection \n10. Others"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_name_prob"),
    
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
    
    elif last_identifier == 'query_refund_name_prob':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']

        user_description_id = WhatsappMessages.objects.filter(identifier = "query_refund_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']

        user_case_id = WhatsappMessages.objects.filter(identifier = "query_refund_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_ct_id = WhatsappMessages.objects.filter(identifier = "query_refund_name_prob", message_receiver = sender_number).values('id').last()
        user_ct = WhatsappMessages.objects.filter(id = int(user_ct_id['id']) - 1 ).values()
        user_ct_msg = user_ct[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "ticket refund_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
          elif last_user_msg1 == '2':
              client_name = "Other"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if user_ct_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif user_ct_msg == '2':
           ct = "I am from a PRO/Agency"
        
        
        prob = None
        if last_user_msg == '1':
            prob = "Application Cancelled Within 48 hours"
           
        elif last_user_msg == '2':
            prob = "Duplicate Application Submitted"
           
        elif last_user_msg == '3':
            prob = "Document Submitted Is Out of Scope"
        
        elif last_user_msg == '4':
            prob = "Duplicate Payment"
           
        elif last_user_msg == '5':
            prob = "Excess Payment"
           
        elif last_user_msg == '6':
            prob = "Express Service Turn Around Time Not Fulfilled"
           
        elif last_user_msg == '7':
            prob = "Wrong Profession Selected"
            
        elif last_user_msg == '8':
            prob = "Wrong Client Selected"
           
        elif last_user_msg == '9':
            prob = "Wrong Package Selection" 
            
        elif last_user_msg == '10':
                prob = "Others" 
           
        msg_sent = ticket_creation_refund(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Refund Request', cf_closure_problem_types = 'Refund Request', cf_problem_disposition = prob,status = 2, priority = 1,type = 'Refund request',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund name"),
    
    elif last_identifier == "other ques refund name":
      
        
      last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
      last_user_msg = last_msg['message']
      print(last_user_msg)
      
      if last_user_msg.lower() == 'y':
          msg_sent = queries_for_name
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund_name query"),
          
          
      elif last_user_msg.lower() == 'n':
          msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
     
     
    ####################################### Refund -Phone ##########################################
    
    elif last_identifier == "Refund query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        msg_sentt = multiple_client_phone(phone = phone, case_number_by_user = message)
        
        if msg_sentt.startswith('We could not find your case number with us.'):
            msg_sent = msg_sentt
            
        else:
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query 1_ini"),
        
    elif last_identifier == "Refund query 1_ini":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
        
       
      
        if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            # msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund_ini"),

    elif last_identifier == 'ticket refund_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = "Please select problem disposition for which you want refund: \n\n1. Application Cancelled Within 48 hours \n2. Duplicate Application Submitted \n3. Document Submitted Is Out of Scope \n4. Duplicate Payment \n5. Excess Payment \n6. Express Service Turn Around Time Not Fulfilled \n7. Wrong Profession Selected \n8. Wrong Client Selected \n9. Wrong Package Selection \n10. Others"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_prob_ini"),
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
        else:
            msg_sent = "Please enter number from 1-2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund_ini_validation"),

    elif last_identifier == 'ticket refund_ini_validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
            msg_sent = "Please select problem disposition for which you want refund: \n\n1. Application Cancelled Within 48 hours \n2. Duplicate Application Submitted \n3. Document Submitted Is Out of Scope \n4. Duplicate Payment \n5. Excess Payment \n6. Express Service Turn Around Time Not Fulfilled \n7. Wrong Profession Selected \n8. Wrong Client Selected \n9. Wrong Package Selection \n10. Others"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_refund_prob_ini"),
            
            ct = None
            if last_user_msg == '1':
                ct = "I am an individual APPLICANT"
            
            elif last_user_msg == '2':
                ct = "I am from a PRO/Agency"
            
        else:
            msg_sent = "Please enter number from 1-2"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket refund_ini_validation"),
   
    elif last_identifier == 'query_refund_prob_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        
        if last_user_msg == '1' or  last_user_msg == '2' or  last_user_msg == '3' or  last_user_msg == '4' or  last_user_msg == '5' or  last_user_msg == '6' or  last_user_msg == '7' or  last_user_msg == '8' or  last_user_msg == '9' or  last_user_msg == '10':
            
            user_description_id = WhatsappMessages.objects.filter(identifier = "ticket refund_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            user_ct_id = WhatsappMessages.objects.filter(identifier = "query_refund_prob_ini", message_receiver = sender_number).values('id').last()
            user_ct = WhatsappMessages.objects.filter(id = int(user_ct_id['id']) - 1 ).values()
            user_ct_msg = user_ct[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']

            cn = multiple_client_phone(phone = phone, case_number_by_user = user_inp_msg)
            client_name = None
            
            
            if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
                client_name = 'Ministry of Justice Bahrain (MOJBH)'
                
            elif cn == 'Council for Regulating the Practice of Engineering Professions':
                client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
                
            elif cn == 'Higher Education Council, Bahrain':
                client_name = 'Higher Education Council Bahrain (HECBH)'
                
            elif cn == 'Ministry of Education Bahrain':
                client_name = 'Ministry of Education Bahrain (MOEBH)'
                
            elif cn == 'Ministry of Labour and Social Development, Bahrain':
                client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'

            elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
                client_name = 'Other'
                
            elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
                client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
                
            elif cn == 'National Center for Complementary and Alternative Medicine':
                client_name = 'Other'
                
            elif cn == 'Saudi Commission for Health Specialties':
                client_name = 'Saudi Commission for Health Specialities (SCHS)'
                
            elif cn == 'DHAMAN':
                client_name = 'Health Assurance Hospitals Company (DHAMAN)'
                
            elif cn == 'Kuwait Society of Engineers':
                client_name = 'Kuwait Society of Engineers (KSE)'
                
            elif cn == 'Oman Medical Specialty Board':
                client_name = 'Oman Medical Speciality Board (OMSB)'
                
            elif cn == 'Oman Society of Engineers':
                client_name = 'Oman Society of Engineers (OSE)'
                
            elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
                client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
                
            elif cn == 'Ministry of Manpower, Singapore':
                client_name = 'Ministry of Manpower Singapore (MOMS)'
                
            elif cn == 'Community Development Authority':
                client_name = 'Community Development Authority Dubai (CDAD)'
                
            elif cn == 'Department of Community Development Abu Dhabi':
                client_name = 'Department of Community Development Abu Dhabi'
                
            elif cn == 'Department of Health, Abu Dhabi':
                client_name = 'Department of Health Abu Dhabi (DOHAD)'
                
            elif cn == 'Dubai Corporation For Ambulance Services':
                client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
                
            elif cn == 'Dubai Health Authority':
                client_name = 'Dubai Health Authority (DHA)'
                
            elif cn == 'Ministry of Education UAE':
                client_name = 'Ministry of Education UAE (MOE UAE)'
                
            elif cn == 'Ministry of Health and Prevention':
                client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
                
            elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
                client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
                
            elif cn == 'Sharjah Health Authority':
                client_name = 'Other'
                
            elif cn == 'Social Services Department Sharjah':
                client_name = 'Social Services Department (SSD)'
                
            elif cn == 'General Medical Council United Kingdom':
                client_name = 'General Medical Council UK (GMCUK)'
                
            elif cn == 'Yemeni Supreme Medical Council':
                client_name = 'Yemeni Supreme Medical Council(YSMC)'
                
            else:
                client_name = 'Other'
            
            
            ct = None
            if user_ct_msg == '1':
                ct = "I am an individual APPLICANT"
                
            elif user_ct_msg == '2':
                ct = "I am from a PRO/Agency"
            
            prob = None
            if last_user_msg == '1':
                prob = "Application Cancelled Within 48 hours"
            
            elif last_user_msg == '2':
                prob = "Duplicate Application Submitted"
            
            elif last_user_msg == '3':
                prob = "Document Submitted Is Out of Scope"
            
            elif last_user_msg == '4':
                prob = "Duplicate Payment"
            
            elif last_user_msg == '5':
                prob = "Excess Payment"
            
            elif last_user_msg == '6':
                prob = "Express Service Turn Around Time Not Fulfilled"
            
            elif last_user_msg == '7':
                prob = "Wrong Profession Selected"
                
            elif last_user_msg == '8':
                prob = "Wrong Client Selected"
            
            elif last_user_msg == '9':
                prob = "Wrong Package Selection" 
                
            elif last_user_msg == '10':
                prob = "Others" 
                
                
                
            msg_sent = ticket_creation_refund(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Refund Request', cf_closure_problem_types = 'Refund Request', cf_problem_disposition = prob,status = 2, priority = 1,type = 'Refund request',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_ini"),
            
        else:
            msg_sent = 'Please enter number from 1 to 9'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "disposition_validation_ini"),
            
    elif last_identifier == 'disposition_validation_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        
        if last_user_msg == '1' or  last_user_msg == '2' or  last_user_msg == '3' or  last_user_msg == '4' or  last_user_msg == '5' or  last_user_msg == '6' or  last_user_msg == '7' or  last_user_msg == '8' or  last_user_msg == '9':
            s
            user_description_id = WhatsappMessages.objects.filter(identifier = "ticket refund_ini", message_receiver = sender_number).values('id').last()
            user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
            user_description_msg = user_description[0]['message']
            
            user_ct_id = WhatsappMessages.objects.filter(identifier = "query_refund_prob_ini", message_receiver = sender_number).values('id').last()
            user_ct = WhatsappMessages.objects.filter(id = int(user_ct_id['id']) - 1 ).values()
            user_ct_msg = user_ct[0]['message']
            
            user_inp_id = WhatsappMessages.objects.filter(identifier = "Refund query 1_ini",message_receiver = sender_number).values('id').last()
            user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
            user_inp_msg = user_inp[0]['message']

            cn = multiple_client_phone(phone = phone, case_number_by_user = user_inp_msg)
            client_name = None
            
            
            if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
                client_name = 'Ministry of Justice Bahrain (MOJBH)'
                
            elif cn == 'Council for Regulating the Practice of Engineering Professions':
                client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
                
            elif cn == 'Higher Education Council, Bahrain':
                client_name = 'Higher Education Council Bahrain (HECBH)'
                
            elif cn == 'Ministry of Education Bahrain':
                client_name = 'Ministry of Education Bahrain (MOEBH)'
                
            elif cn == 'Ministry of Labour and Social Development, Bahrain':
                client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'

            elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
                client_name = 'Other'
                
            elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
                client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
                
            elif cn == 'National Center for Complementary and Alternative Medicine':
                client_name = 'Other'
                
            elif cn == 'Saudi Commission for Health Specialties':
                client_name = 'Saudi Commission for Health Specialities (SCHS)'
                
            elif cn == 'DHAMAN':
                client_name = 'Health Assurance Hospitals Company (DHAMAN)'
                
            elif cn == 'Kuwait Society of Engineers':
                client_name = 'Kuwait Society of Engineers (KSE)'
                
            elif cn == 'Oman Medical Specialty Board':
                client_name = 'Oman Medical Speciality Board (OMSB)'
                
            elif cn == 'Oman Society of Engineers':
                client_name = 'Oman Society of Engineers (OSE)'
                
            elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
                client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
                
            elif cn == 'Ministry of Manpower, Singapore':
                client_name = 'Ministry of Manpower Singapore (MOMS)'
                
            elif cn == 'Community Development Authority':
                client_name = 'Community Development Authority Dubai (CDAD)'
                
            elif cn == 'Department of Community Development Abu Dhabi':
                client_name = 'Department of Community Development Abu Dhabi'
                
            elif cn == 'Department of Health, Abu Dhabi':
                client_name = 'Department of Health Abu Dhabi (DOHAD)'
                
            elif cn == 'Dubai Corporation For Ambulance Services':
                client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
                
            elif cn == 'Dubai Health Authority':
                client_name = 'Dubai Health Authority (DHA)'
                
            elif cn == 'Ministry of Education UAE':
                client_name = 'Ministry of Education UAE (MOE UAE)'
                
            elif cn == 'Ministry of Health and Prevention':
                client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
                
            elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
                client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
                
            elif cn == 'Sharjah Health Authority':
                client_name = 'Other'
                
            elif cn == 'Social Services Department Sharjah':
                client_name = 'Social Services Department (SSD)'
                
            elif cn == 'General Medical Council United Kingdom':
                client_name = 'General Medical Council UK (GMCUK)'
                
            elif cn == 'Yemeni Supreme Medical Council':
                client_name = 'Yemeni Supreme Medical Council(YSMC)'
                
            else:
                client_name = 'Other'
            
            
            ct = None
            if user_ct_msg == '1':
                ct = "I am an individual APPLICANT"
                
            elif user_ct_msg == '2':
                ct = "I am from a PRO/Agency"
            
            prob = None
            if last_user_msg == '1':
                prob = "Application Cancelled Within 48 hours"
            
            elif last_user_msg == '2':
                prob = "Duplicate Application Submitted"
            
            elif last_user_msg == '3':
                prob = "Document Submitted Is Out of Scope"
            
            elif last_user_msg == '4':
                prob = "Duplicate Payment"
            
            elif last_user_msg == '5':
                prob = "Excess Payment"
            
            elif last_user_msg == '6':
                prob = "Express Service Turn Around Time Not Fulfilled"
            
            elif last_user_msg == '7':
                prob = "Wrong Profession Selected"
                
            elif last_user_msg == '8':
                prob = "Wrong Client Selected"
            
            elif last_user_msg == '9':
                prob = "Wrong Package Selection"
                
            elif last_user_msg == '10':
                prob = "Others" 
                
                
                
            msg_sent = ticket_creation_refund(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Refund Request', cf_closure_problem_types = 'Refund Request', cf_problem_disposition = prob,status = 2, priority = 1,type = 'Refund request',cf_licensing_authority_or_institution = client_name)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_ini"),
            
        else:
            msg_sent = 'Please enter number from 1 to 9'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "disposition_validation_ini"),
            
    elif last_identifier == "other ques refund_ini":  
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_ini_validation"),

    elif last_identifier == "other ques refund_ini_validation":  
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Refund query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques refund_ini_validation"),

    ######################################################## Other Create Ticket ########################################################################## 
    
    # elif last_identifier == "OCT query":
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)

        
    #     user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
    #     user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
    #     user_user_msg = user_user[0]['message']
        
    #     msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT query 1"),
        
        
    #     if last_user_msg == "1":
    #       count_name = "Bahrain"
    #     elif last_user_msg == "2":
    #       count_name = 'KSA' 
    #     elif last_user_msg == "3":
    #       count_name = 'Kuwait'
    #     elif last_user_msg == "4":
    #       count_name = 'Oman' 
    #     elif last_user_msg == "5":
    #       count_name = 'Qatar' 
    #     elif last_user_msg == "6":
    #       count_name = 'Singapore' 
    #     elif last_user_msg == "7":
    #       count_name = 'UAE' 
    #     elif last_user_msg == "8":
    #       count_name = 'United Kingdom' 
    #     elif last_user_msg == "9":
    #       count_name = 'Yemen'
        
    # elif last_identifier == "OCT query 1":
        
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT query 1",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'passport_received').values().last()
    #     validation_msg = stating_query['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg == '1':
    #           client_name = "Bahrain National Health Regulatory Authority(NHRA)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Ministry of works, Municipalities affairs and urban planning"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg == '1':
    #           client_name = "National Center for complementary and alternative Medicine(NCCAM)"
          
    #       elif last_user_msg == '2':
    #           client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
    #     elif user_inp_msg == '3':
    #       if last_user_msg == '1':
    #           client_name = "Health Assurance Hospitals Company(DHAMAN)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Kuwait Society of Engineers(KSE)"
              
    #     elif user_inp_msg == '4':
    #       if last_user_msg == '1':
    #           client_name = "Oman Medical Speciality Board(OMSB)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Oman Society of Engineers(OSE)"
              
    #     elif user_inp_msg == '5':
    #       if last_user_msg == '1':
    #           client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
    #     elif user_inp_msg == '6':
    #       if last_user_msg == '1':
    #           client_name = "Ministry of Manpower Singapore(MOMS)"
              
    #     elif user_inp_msg == '7':
    #       if last_user_msg == '1':
    #           client_name = "Community Developement Authority Dubai(CDAD)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Department of Community Development Abu-Dhabi"
          
    #       elif last_user_msg == '3':
    #           client_name = "Department of Health Abu Dhabi(DOHAD)"
                
    #       elif last_user_msg == '4':
    #           client_name = "Dubai Corporation for Ambulance Service(DCAS)"
              
    #       elif last_user_msg == '5':
    #           client_name = "Dubai Health Authority(DHA)"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Education UAE(MOE UAE)"
              
    #       elif last_user_msg == '7':
    #           client_name = "Ministry of Health and Prevention(MOH-AP)"
              
    #       elif last_user_msg == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
    #       elif last_user_msg == '9':
    #           client_name = "Social Services Department(SSD)"
              
    #     elif user_inp_msg == '8':
    #       if last_user_msg == '1':
    #           client_name = "General Medical Council United Kingdom"
              
    #     elif user_inp_msg == '9':
    #       if last_user_msg == '1':
    #           client_name = "Yemeni Supreme Medical Council"
      
    #     if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply" in validation_msg :
    #         msg_sent = refund(cli_name = client_name)
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other create ticket"),
    
    # elif last_identifier == "other create ticket":
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_number"),
    
    # elif last_identifier == 'query_OCT_number':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_ct"),
    
    # elif last_identifier == 'query_OCT_ct':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #     user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #     user_email_msg = user_email[0]['message']
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_OCT_number", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_OCT_ct", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT query 1",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     user_cli_id = WhatsappMessages.objects.filter(identifier = "other create ticket",message_receiver = sender_number).values('id').last()
    #     user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
    #     last_user_msg1 = user_cli[0]['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg1 == '1':
    #           client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Other"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg1 == '1':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Saudi Commission for Health Specialities (SCHS)"
        
    #     elif user_inp_msg == '3':
    #       if last_user_msg1 == '1':
    #           client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Kuwait Society of Engineers (KSE)"
        
    #     elif user_inp_msg == '4':
    #       if last_user_msg1 == '1':
    #           client_name = "Oman Medical Speciality Board (OMSB)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Oman Society of Engineers (OSE)"
        
    #     elif user_inp_msg == '5':
    #       if last_user_msg1 == '1':
    #           client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
    #     elif user_inp_msg == '6':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Manpower Singapore (MOMS)"
        
    #     elif user_inp_msg == '7':
    #       if last_user_msg1 == '1':
    #           client_name = "Community Development Authority Dubai (CDAD)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Department of Health Abu Dhabi (DOHAD)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Dubai Health Authority (DHA)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Ministry of Education UAE (MOE UAE)"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
    #       elif last_user_msg1 == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
    #       elif last_user_msg1 == '9':
    #           client_name = "Social Services Department (SSD)"
        
    #     elif user_inp_msg == '8':
    #       if last_user_msg1 == '1':
    #           client_name = "General Medical Council UK (GMCUK)"
        
    #     elif user_inp_msg == '9':
    #       if last_user_msg1 == '1':
    #           client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
           
    #     msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Other Create Ticket', cf_closure_problem_types = 'Test Ticket',status = 2, priority = 1, type = 'General Enquiry',cf_licensing_authority_or_institution = client_name)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_OCT"),
    
    # elif last_identifier == "query_ques_OCT":
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT query"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    
    ################ OCT - Name ###############################
    
    elif last_identifier == "OCT_name query":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)

        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_csdisable_client(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT name query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
        
    elif last_identifier == "OCT name query 1":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'name_received').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
                
          elif last_user_msg == '2':
              client_name = "Ministry of works, Municipalities affairs and urban planning"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for complementary and alternative Medicine(NCCAM)"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Health Assurance Hospitals Company(DHAMAN)"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers(KSE)"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers(OSE)"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower Singapore(MOMS)"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Developement Authority Dubai(CDAD)"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu-Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation for Ambulance Service(DCAS)"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority(DHA)"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE(MOE UAE)"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention(MOH-AP)"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Social Services Department(SSD)"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
        
        if queries_for_name in validation_msg :
            msg_sent = refund(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other create ticket name"),
  
    elif last_identifier == "other create ticket name":
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_name_number"),
    
    elif last_identifier == 'query_OCT_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_name_ct"),
    
    elif last_identifier == 'query_OCT_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_OCT_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_OCT_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other create ticket name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
          elif last_user_msg1 == '2':
              client_name = "Other"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Other Create Ticket', cf_closure_problem_types = 'Test Ticket',status = 2, priority = 1, type = 'General Enquiry',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_OCT_name"),
    
    elif last_identifier == "query_ques_OCT_name":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
               
    # ################################################### OCT -Phone ################
    
    # elif last_identifier == "OCT query_ini":
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)

        
    #     user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
    #     user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
    #     user_user_msg = user_user[0]['message']
        
    #     msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT query 1_ini"),
        
        
    #     if last_user_msg == "1":
    #       count_name = "Bahrain"
    #     elif last_user_msg == "2":
    #       count_name = 'KSA' 
    #     elif last_user_msg == "3":
    #       count_name = 'Kuwait'
    #     elif last_user_msg == "4":
    #       count_name = 'Oman' 
    #     elif last_user_msg == "5":
    #       count_name = 'Qatar' 
    #     elif last_user_msg == "6":
    #       count_name = 'Singapore' 
    #     elif last_user_msg == "7":
    #       count_name = 'UAE' 
    #     elif last_user_msg == "8":
    #       count_name = 'United Kingdom' 
    #     elif last_user_msg == "9":
    #       count_name = 'Yemen'
        
    # elif last_identifier == "OCT query 1_ini":
        
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT query 1_ini",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
    #     validation_msg = stating_query['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg == '1':
    #           client_name = "Bahrain National Health Regulatory Authority(NHRA)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Ministry of works, Municipalities affairs and urban planning"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg == '1':
    #           client_name = "National Center for complementary and alternative Medicine(NCCAM)"
          
    #       elif last_user_msg == '2':
    #           client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
    #     elif user_inp_msg == '3':
    #       if last_user_msg == '1':
    #           client_name = "Health Assurance Hospitals Company(DHAMAN)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Kuwait Society of Engineers(KSE)"
              
    #     elif user_inp_msg == '4':
    #       if last_user_msg == '1':
    #           client_name = "Oman Medical Speciality Board(OMSB)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Oman Society of Engineers(OSE)"
              
    #     elif user_inp_msg == '5':
    #       if last_user_msg == '1':
    #           client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
    #     elif user_inp_msg == '6':
    #       if last_user_msg == '1':
    #           client_name = "Ministry of Manpower Singapore(MOMS)"
              
    #     elif user_inp_msg == '7':
    #       if last_user_msg == '1':
    #           client_name = "Community Developement Authority Dubai(CDAD)"
                
    #       elif last_user_msg == '2':
    #           client_name = "Department of Community Development Abu-Dhabi"
          
    #       elif last_user_msg == '3':
    #           client_name = "Department of Health Abu Dhabi(DOHAD)"
                
    #       elif last_user_msg == '4':
    #           client_name = "Dubai Corporation for Ambulance Service(DCAS)"
              
    #       elif last_user_msg == '5':
    #           client_name = "Dubai Health Authority(DHA)"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Education UAE(MOE UAE)"
              
    #       elif last_user_msg == '7':
    #           client_name = "Ministry of Health and Prevention(MOH-AP)"
              
    #       elif last_user_msg == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
    #       elif last_user_msg == '9':
    #           client_name = "Social Services Department(SSD)"
              
    #     elif user_inp_msg == '8':
    #       if last_user_msg == '1':
    #           client_name = "General Medical Council United Kingdom"
              
    #     elif user_inp_msg == '9':
    #       if last_user_msg == '1':
    #           client_name = "Yemeni Supreme Medical Council"
      
    #     if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
    #         msg_sent = refund(cli_name = client_name)
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other create ticket_ini"),
    
    # elif last_identifier == "other create ticket_ini":
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_number_ini"),
    
    # elif last_identifier == 'query_OCT_numberp_ini':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_OCT_ct_ini"),
    
    # elif last_identifier == 'query_OCT_ct_ini':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
    #     user_email_msg = phone_email(phone)
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_OCT_number_ini", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_OCT_ct_ini", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "OCT query 1_ini",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     user_cli_id = WhatsappMessages.objects.filter(identifier = "other create ticket_ini",message_receiver = sender_number).values('id').last()
    #     user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
    #     last_user_msg1 = user_cli[0]['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg1 == '1':
    #           client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Other"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg1 == '1':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Saudi Commission for Health Specialities (SCHS)"
        
    #     elif user_inp_msg == '3':
    #       if last_user_msg1 == '1':
    #           client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Kuwait Society of Engineers (KSE)"
        
    #     elif user_inp_msg == '4':
    #       if last_user_msg1 == '1':
    #           client_name = "Oman Medical Speciality Board (OMSB)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Oman Society of Engineers (OSE)"
        
    #     elif user_inp_msg == '5':
    #       if last_user_msg1 == '1':
    #           client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
    #     elif user_inp_msg == '6':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Manpower Singapore (MOMS)"
        
    #     elif user_inp_msg == '7':
    #       if last_user_msg1 == '1':
    #           client_name = "Community Development Authority Dubai (CDAD)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Department of Health Abu Dhabi (DOHAD)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Dubai Health Authority (DHA)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Ministry of Education UAE (MOE UAE)"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
    #       elif last_user_msg1 == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
    #       elif last_user_msg1 == '9':
    #           client_name = "Social Services Department (SSD)"
        
    #     elif user_inp_msg == '8':
    #       if last_user_msg1 == '1':
    #           client_name = "General Medical Council UK (GMCUK)"
        
    #     elif user_inp_msg == '9':
    #       if last_user_msg1 == '1':
    #           client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
           
    #     msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Other Create Ticket', cf_closure_problem_types = 'Test Ticket',status = 2, priority = 1, type = 'General Enquiry',cf_licensing_authority_or_institution = client_name)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_OCT_ini"),
    
    # elif last_identifier == "query_ques_OCT_ini":
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "OCT query_ini"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    

    #################################### Reterieve Case Number #################################################################
    
    elif last_identifier == "Retrieve case query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
    
    elif last_identifier == "Retrieve case query 1":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
            user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
            user_passport_msg = user_passport[0]['message']
            

          
            msg_sent = retrieve_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status"),
        
        elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply" in validation_msg :
            msg_sent = retrieve_phone(cli_name = client_name,phone=phone,email=None)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status"),
        
    
        else:
            WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
    
    elif last_identifier == "other ques related to retrieve_status":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_retrieve"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "quess_retrieve":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_retrieve"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case query"),
    
    elif last_identifier == "ques_ask_retrieve":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_number"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == 'query_ret_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_ct"),
    
    elif last_identifier == 'query_ret_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ret_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ret_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to retrieve_status",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)" 
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Retrieve Case Number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'Retrieve DataFlow case number',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_retrieve"),
    
    elif last_identifier == "query_ques_retrieve":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    
    ################ Retrieve case - Name ##################
    
    elif last_identifier == "Retrieve_case_name query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        msg_sent = already_existing_user_csdisable_client(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case_name query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
    
    elif last_identifier == "Retrieve case_name query 1":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case_name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "name_received").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        
        if queries_for_name in validation_msg:
            user_name_id = WhatsappMessages.objects.filter(identifier = "name_received", message_receiver = sender_number).values('id').last()
            user_name = WhatsappMessages.objects.filter(id = int(user_name_id['id']) - 1 ).values()
            user_name_msg = user_name[0]['message']
            
            msg_sent = retrieve_name(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket retrieve_name"),
    
    elif last_identifier == "ticket retrieve_name":

        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_name_number"),
    
    elif last_identifier == 'query_ret_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_name_ct"),
    
    elif last_identifier == 'query_ret_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ret_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ret_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case_name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "ticket retrieve_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation_ret(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Retrieve Case Number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'Retrieve DataFlow case number',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques retrieve name"),
    
    elif last_identifier == "other ques retrieve name":
      last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
      last_user_msg = last_msg['message']
      print(last_user_msg)
      
      if last_user_msg.lower() == 'y':
          msg_sent = queries_for_name
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve_case_name query"),
          
          
      elif last_user_msg.lower() == 'n':
          msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
          
          
    ################################ Retreieve - Phone #################################
    
    elif last_identifier == "Retrieve case initial":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_rdcn"),     
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

    elif last_identifier == "create_ticket_or_return_rdcn":
        phone = last_query['message_receiver']
        phone = phone[10:]
       
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)

        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        if last_user_msg == '1':
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "retrieve case number country"),  
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Case_status_name query"),

    elif last_identifier == "retrieve case number country":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case number regulator name"),
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
    
    elif last_identifier == "Retrieve case number regulator name":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case number regulator name",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
            user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
            user_passport_msg = user_passport[0]['message']
            

          
            msg_sent = retrieve_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status_ini"),
        
        elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            msg_sent = retrieve_phone(cli_name = client_name,phone=phone,email=None)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status_ini"),
        
    
        else:
            WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
    
    elif  last_identifier == "other ques related to retrieve_status_ini" :
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        if last_user_msg == '1' or last_user_msg == '2' or last_user_msg == '3' or last_user_msg == '4' or last_user_msg == '5' or last_user_msg == '6' or last_user_msg == '7' or last_user_msg == '8' or last_user_msg == '9' or last_user_msg == '10' :
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
                )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "detailed description rdcn"),
        
    elif last_identifier == "detailed description rdcn":
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ask case number rdcn"),
            
    elif last_identifier == 'ask case number rdcn':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "individual/pro rdcn"),
    
    elif last_identifier == 'individual/pro rdcn':
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)

        user_description_id = WhatsappMessages.objects.filter(identifier = "ask case number rdcn", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "individual/pro rdcn", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "retrieve case number country",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to retrieve_status_ini",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
         
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        elif last_user_msg != '1' and last_user_msg != '2':
           ct = "I am an individual APPLICANT"
           
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Case Status', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'My case is past due date - when will I get the verification report?',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_case_retrieve_ini"),
    
    elif last_identifier == "query_case_retrieve_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_link_phone"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
             
    
    # elif last_identifier == "Retrieve case query 1_ini":
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
        
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case query 1_ini",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
    #     validation_msg = stating_query['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg == '1':
    #           client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
    #       elif last_user_msg == '2':
    #           client_name = "Council for Regulating the Practice of Engineering Professions"
          
    #       elif last_user_msg == '3':
    #           client_name = "Higher Education Council, Bahrain"
                
    #       elif last_user_msg == '4':
    #           client_name = "Ministry of Education Bahrain"
              
    #       elif last_user_msg == '5':
    #           client_name = "Ministry of Labour and Social Development, Bahrain"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
    #       elif last_user_msg == '7':
    #           client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
    #     elif user_inp_msg == '2':
    #       if last_user_msg == '1':
    #           client_name = "National Center for Complementary and Alternative Medicine"
          
    #       elif last_user_msg == '2':
    #           client_name = "Saudi Commission for Health Specialties"
              
    #     elif user_inp_msg == '3':
    #       if last_user_msg == '1':
    #           client_name = "DHAMAN"
                
    #       elif last_user_msg == '2':
    #           client_name = "Kuwait Society of Engineers"
              
    #     elif user_inp_msg == '4':
    #       if last_user_msg == '1':
    #           client_name = "Oman Medical Specialty Board"
                
    #       elif last_user_msg == '2':
    #           client_name = "Oman Society of Engineers"
              
    #     elif user_inp_msg == '5':
    #       if last_user_msg == '1':
    #           client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
    #     elif user_inp_msg == '6':
    #       if last_user_msg == '1':
    #           client_name = "Ministry of Manpower, Singapore"
              
    #     elif user_inp_msg == '7':
    #       if last_user_msg == '1':
    #           client_name = "Community Development Authority"
                
    #       elif last_user_msg == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
          
    #       elif last_user_msg == '3':
    #           client_name = "Department of Health, Abu Dhabi"
                
    #       elif last_user_msg == '4':
    #           client_name = "Dubai Corporation For Ambulance Services"
              
    #       elif last_user_msg == '5':
    #           client_name = "Dubai Health Authority"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Education UAE"
              
    #       elif last_user_msg == '7':
    #           client_name = "Ministry of Health and Prevention"
              
    #       elif last_user_msg == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
    #       elif last_user_msg == '9':
    #           client_name = "Sharjah Health Authority"
              
    #       elif last_user_msg == '10':
    #           client_name = "Social Services Department Sharjah"
              
    #     elif user_inp_msg == '8':
    #       if last_user_msg == '1':
    #           client_name = "General Medical Council United Kingdom"
              
    #     elif user_inp_msg == '9':
    #       if last_user_msg == '1':
    #           client_name = "Yemeni Supreme Medical Council"
              
    #     if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
    #         user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #         user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #         user_email_msg = user_email[0]['message']
    #         user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
    #         user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
    #         user_passport_msg = user_passport[0]['message']
            

          
    #         msg_sent = retrieve_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status_ini"),
        
    #     elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
    #         msg_sent = retrieve_phone(cli_name = client_name,phone=phone,email=None)
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to retrieve_status_ini"),
        
    
    #     else:
    #         WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
    
    # elif last_identifier == "other ques related to retrieve_status_ini":

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_retrieve_ini"),
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    # elif last_identifier == "quess_retrieve_ini":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg == '1':
    #         msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_retrieve_ini"),
        
        
    #     elif last_user_msg == '2':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case initial"),
    
    # elif last_identifier == "ques_ask_retrieve_ini":
      
    #   if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_number_ini"),
    
    #   elif last_next_step.startswith("Do you have any other query? (Y or N)"):

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case initial"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    # elif last_identifier == 'query_ret_number_ini':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ret_ct_ini"),
    
    # elif last_identifier == 'query_ret_ct_ini':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #     # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #     # user_email_msg = user_email[0]['message']
        
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
    #     user_email_msg = phone_email(phone)
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_ret_number_ini", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_ret_ct_ini", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "Retrieve case query 1_ini",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to retrieve_status_ini",message_receiver = sender_number).values('id').last()
    #     user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
    #     last_user_msg1 = user_cli[0]['message']
        
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Justice Bahrain (MOJBH)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Higher Education Council Bahrain (HECBH)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Ministry of Education Bahrain (MOEBH)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg1 == '1':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Saudi Commission for Health Specialities (SCHS)"
        
    #     elif user_inp_msg == '3':
    #       if last_user_msg1 == '1':
    #           client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Kuwait Society of Engineers (KSE)"
        
    #     elif user_inp_msg == '4':
    #       if last_user_msg1 == '1':
    #           client_name = "Oman Medical Speciality Board (OMSB)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Oman Society of Engineers (OSE)"
        
    #     elif user_inp_msg == '5':
    #       if last_user_msg1 == '1':
    #           client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
    #     elif user_inp_msg == '6':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Manpower Singapore (MOMS)"
        
    #     elif user_inp_msg == '7':
    #       if last_user_msg1 == '1':
    #           client_name = "Community Development Authority Dubai (CDAD)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Department of Health Abu Dhabi (DOHAD)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Dubai Health Authority (DHA)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Ministry of Education UAE (MOE UAE)"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
    #       elif last_user_msg1 == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
    #       elif last_user_msg1 == '9':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '10':
    #           client_name = "Social Services Department (SSD)"
        
    #     elif user_inp_msg == '8':
    #       if last_user_msg1 == '1':
    #           client_name = "General Medical Council UK (GMCUK)"
        
    #     elif user_inp_msg == '9':
    #       if last_user_msg1 == '1':
    #           client_name = "Yemeni Supreme Medical Council(YSMC)" 
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
           
    #     msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Retrieve Case Number', cf_closure_problem_types = 'Application Status', cf_problem_disposition = 'Beyond TAT',status = 2, priority = 1,type = 'Retrieve DataFlow case number',cf_licensing_authority_or_institution = client_name)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_retrieve_ini"),
    
    # elif last_identifier == "query_ques_retrieve_ini":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Retrieve case initial"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
      
    ################################################ Report Clarification ###############################################################    
    
    elif last_identifier == "Report clarification query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        # msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        msg_sentt = multiple_client_email(email = user_email_msg, case_number_by_user = message)
        if msg_sentt.startswith('We could not find your case number with us.'):
            msg_sent = msg_sentt
            
        else:
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query 1"),
        
    elif last_identifier == "Report clarification query 1":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'passport_received').values().last()
        validation_msg = stating_query['message']
      
        
        if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply" in validation_msg :
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification"),
    
    elif last_identifier == 'ticket clarification':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
            
          user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
          user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
          user_email_msg = user_email[0]['message']
          
          user_description_id = WhatsappMessages.objects.filter(identifier = "ticket clarification", message_receiver = sender_number).values('id').last()
          user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
          user_description_msg = user_description[0]['message']
          
          # user_case_id = WhatsappMessages.objects.filter(identifier = "query_clr_ct", message_receiver = sender_number).values('id').last()
          # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
          # user_case_msg = user_case[0]['message']
          
          user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1",message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          
          cn = multiple_client_email(email = user_email_msg, case_number_by_user = user_inp_msg)
          client_name = None
          
          if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
              client_name = 'Ministry of Justice Bahrain (MOJBH)'
              
          elif cn == 'Council for Regulating the Practice of Engineering Professions':
              client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
              
          elif cn == 'Higher Education Council, Bahrain':
              client_name = 'Higher Education Council Bahrain (HECBH)'
              
          elif cn == 'Ministry of Education Bahrain':
              client_name = 'Ministry of Education Bahrain (MOEBH)'
              
          elif cn == 'Ministry of Labour and Social Development, Bahrain':
              client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'
  
          elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
              client_name = 'Other'
              
          elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
              client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
              
          elif cn == 'National Center for Complementary and Alternative Medicine':
              client_name = 'Other'
              
          elif cn == 'Saudi Commission for Health Specialties':
              client_name = 'Saudi Commission for Health Specialities (SCHS)'
              
          elif cn == 'DHAMAN':
              client_name = 'Health Assurance Hospitals Company (DHAMAN)'
              
          elif cn == 'Kuwait Society of Engineers':
              client_name = 'Kuwait Society of Engineers (KSE)'
              
          elif cn == 'Oman Medical Specialty Board':
              client_name = 'Oman Medical Speciality Board (OMSB)'
              
          elif cn == 'Oman Society of Engineers':
              client_name = 'Oman Society of Engineers (OSE)'
              
          elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
              client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
              
          elif cn == 'Ministry of Manpower, Singapore':
              client_name = 'Ministry of Manpower Singapore (MOMS)'
              
          elif cn == 'Community Development Authority':
              client_name = 'Community Development Authority Dubai (CDAD)'
              
          elif cn == 'Department of Community Development Abu Dhabi':
              client_name = 'Department of Community Development Abu Dhabi'
              
          elif cn == 'Department of Health, Abu Dhabi':
              client_name = 'Department of Health Abu Dhabi (DOHAD)'
              
          elif cn == 'Dubai Corporation For Ambulance Services':
              client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
              
          elif cn == 'Dubai Health Authority':
              client_name = 'Dubai Health Authority (DHA)'
              
          elif cn == 'Ministry of Education UAE':
              client_name = 'Ministry of Education UAE (MOE UAE)'
              
          elif cn == 'Ministry of Health and Prevention':
              client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
              
          elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
              client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
              
          elif cn == 'Sharjah Health Authority':
              client_name = 'Other'
              
          elif cn == 'Social Services Department Sharjah':
              client_name = 'Social Services Department (SSD)'
              
          elif cn == 'General Medical Council United Kingdom':
              client_name = 'General Medical Council UK (GMCUK)'
              
          elif cn == 'Yemeni Supreme Medical Council':
              client_name = 'Yemeni Supreme Medical Council(YSMC)'
                 
          else:
              client_name = 'Other'
          
          
          ct = None
          if last_user_msg == '1':
             ct = "I am an individual APPLICANT"
             
          elif last_user_msg == '2':
             ct = "I am from a PRO/Agency"  
               
          msg_sent = ticket_creation_clarification(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Clarification', cf_closure_problem_types = 'Clarification of Report Information',cf_problem_disposition = 'Clarification from IA' , status = 2, priority = 1, type = 'Report Error Correction',cf_licensing_authority_or_institution = client_name)
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification"),
          
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification validation"),

    elif last_identifier == 'ticket clarification validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg == '1' or last_user_msg == '2':
            
          user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
          user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
          user_email_msg = user_email[0]['message']
          
          user_description_id = WhatsappMessages.objects.filter(identifier = "ticket clarification", message_receiver = sender_number).values('id').last()
          user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
          user_description_msg = user_description[0]['message']
          
          # user_case_id = WhatsappMessages.objects.filter(identifier = "query_clr_ct", message_receiver = sender_number).values('id').last()
          # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
          # user_case_msg = user_case[0]['message']
          
          user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1",message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          
          cn = multiple_client_email(email = user_email_msg, case_number_by_user = user_inp_msg)
          client_name = None
          
          if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
              client_name = 'Ministry of Justice Bahrain (MOJBH)'
              
          elif cn == 'Council for Regulating the Practice of Engineering Professions':
              client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
              
          elif cn == 'Higher Education Council, Bahrain':
              client_name = 'Higher Education Council Bahrain (HECBH)'
              
          elif cn == 'Ministry of Education Bahrain':
              client_name = 'Ministry of Education Bahrain (MOEBH)'
              
          elif cn == 'Ministry of Labour and Social Development, Bahrain':
              client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'
  
          elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
              client_name = 'Other'
              
          elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
              client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
              
          elif cn == 'National Center for Complementary and Alternative Medicine':
              client_name = 'Other'
              
          elif cn == 'Saudi Commission for Health Specialties':
              client_name = 'Saudi Commission for Health Specialities (SCHS)'
              
          elif cn == 'DHAMAN':
              client_name = 'Health Assurance Hospitals Company (DHAMAN)'
              
          elif cn == 'Kuwait Society of Engineers':
              client_name = 'Kuwait Society of Engineers (KSE)'
              
          elif cn == 'Oman Medical Specialty Board':
              client_name = 'Oman Medical Speciality Board (OMSB)'
              
          elif cn == 'Oman Society of Engineers':
              client_name = 'Oman Society of Engineers (OSE)'
              
          elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
              client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
              
          elif cn == 'Ministry of Manpower, Singapore':
              client_name = 'Ministry of Manpower Singapore (MOMS)'
              
          elif cn == 'Community Development Authority':
              client_name = 'Community Development Authority Dubai (CDAD)'
              
          elif cn == 'Department of Community Development Abu Dhabi':
              client_name = 'Department of Community Development Abu Dhabi'
              
          elif cn == 'Department of Health, Abu Dhabi':
              client_name = 'Department of Health Abu Dhabi (DOHAD)'
              
          elif cn == 'Dubai Corporation For Ambulance Services':
              client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
              
          elif cn == 'Dubai Health Authority':
              client_name = 'Dubai Health Authority (DHA)'
              
          elif cn == 'Ministry of Education UAE':
              client_name = 'Ministry of Education UAE (MOE UAE)'
              
          elif cn == 'Ministry of Health and Prevention':
              client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
              
          elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
              client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
              
          elif cn == 'Sharjah Health Authority':
              client_name = 'Other'
              
          elif cn == 'Social Services Department Sharjah':
              client_name = 'Social Services Department (SSD)'
              
          elif cn == 'General Medical Council United Kingdom':
              client_name = 'General Medical Council UK (GMCUK)'
              
          elif cn == 'Yemeni Supreme Medical Council':
              client_name = 'Yemeni Supreme Medical Council(YSMC)'
                 
          else:
              client_name = 'Other'
          
          
          ct = None
          if last_user_msg == '1':
             ct = "I am an individual APPLICANT"
             
          elif last_user_msg == '2':
             ct = "I am from a PRO/Agency"  
               
          msg_sent = ticket_creation_clarification(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Clarification', cf_closure_problem_types = 'Clarification of Report Information',cf_problem_disposition = 'Clarification from IA' , status = 2, priority = 1, type = 'Report Error Correction',cf_licensing_authority_or_institution = client_name)
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification"),
          
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification validation"),
          
    elif last_identifier == "other ques clarification":     
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_validation"),

    elif last_identifier == "other ques clarification_validation":
          
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_validation"),

    ####################### Report clarifiaction - Name ##############################
    
    elif last_identifier == "Report_clarification_name query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
          
        msg_sent = already_existing_user_csdisable_client(us_inp = message,user_in = user_user_msg)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification name query 1"),
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen'
    
    elif last_identifier == "Report clarification name query 1":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'name_received').values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain National Health Regulatory Authority(NHRA)"
                
          elif last_user_msg == '2':
              client_name = "Ministry of works, Municipalities affairs and urban planning"
        
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for complementary and alternative Medicine(NCCAM)"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialities(SCFHS)"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "Health Assurance Hospitals Company(DHAMAN)"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers(KSE)"
         
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Speciality Board(OMSB)"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers(OSE)"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Practitioners- Ministry of Public Health-The State of Qatar"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower Singapore(MOMS)"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Developement Authority Dubai(CDAD)"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu-Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health Abu Dhabi(DOHAD)"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation for Ambulance Service(DCAS)"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority(DHA)"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE(MOE UAE)"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention(MOH-AP)"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Social Services Department(SSD)"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
        
        
        if queries_for_name in validation_msg :
            msg_sent = refund(cli_name = client_name)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification_name"),
            
    elif last_identifier == "ticket clarification_name":

        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_clr_name_number"),
    
    elif last_identifier == 'query_clr_name_number':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_clr_name_ct"),
    
    elif last_identifier == 'query_clr_name_ct':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_clr_name_number", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_clr_name_ct", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification name query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "ticket clarification_name",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
          elif last_user_msg1 == '2':
              client_name = "Other"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
           
        msg_sent = ticket_creation_clarification(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Report Clarification', cf_closure_problem_types = 'Clarification of Report Information',cf_problem_disposition = 'Clarification from IA' , status = 2, priority = 1, type = 'Report Error Correction',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification name"),
    
    elif last_identifier == "other ques clarification name":
      last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
      last_user_msg = last_msg['message']
      print(last_user_msg)
      
      if last_user_msg.lower() == 'y':
          msg_sent = queries_for_name
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_clarification_name query"),
          
          
      elif last_user_msg.lower() == 'n':
          msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
   
      elif last_next_step.startswith("Dear Applicant, We have already created the support ticket for you and it has been assigned to one of our team members. You will soon receive an acknowledgement email for the same."):
          
          last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
          last_user_msg = last_msg['message']
          print(last_user_msg)
          
          if last_user_msg.lower() == 'y':
              msg_sent = queries_for_name
              returned_mesage = twilioclient.messages.create(
              from_=str(receiver),
              body= msg_sent,
              to=str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_clarification_name query"),
              
              
          elif last_user_msg.lower() == 'n':
              msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
              returned_mesage = twilioclient.messages.create(
              from_=str(receiver),
              body= msg_sent,
              to=str(sender_number)
               )
              WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
              
    ################################ Report clarification - Phone ################################################
    
    elif last_identifier == "Report clarification query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        
        
        
        # msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        msg_sentt = multiple_client_phone(phone = phone, case_number_by_user = message)
        
        if msg_sentt.startswith('We could not find your case number with us.'):
            msg_sent = msg_sentt
            
        else:
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query 1_ini"),
        
    elif last_identifier == "Report clarification query 1_ini":
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = 'phone_validated').values().last()
        validation_msg = stating_query['message']
      
        if "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification_ini"),
    
    elif last_identifier == 'ticket clarification_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        user_email_msg = phone_email(phone)
        
        
        if last_user_msg == '1' or last_user_msg == '2':
            
          user_description_id = WhatsappMessages.objects.filter(identifier = "ticket clarification_ini", message_receiver = sender_number).values('id').last()
          user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
          user_description_msg = user_description[0]['message']
          
          # user_case_id = WhatsappMessages.objects.filter(identifier = "query_clr_ct_ini", message_receiver = sender_number).values('id').last()
          # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
          # user_case_msg = user_case[0]['message']
          
          user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1_ini",message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          
          cn = multiple_client_phone(phone = phone, case_number_by_user = user_inp_msg)
          client_name = None
          
          if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
              client_name = 'Ministry of Justice Bahrain (MOJBH)'
              
          elif cn == 'Council for Regulating the Practice of Engineering Professions':
              client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
              
          elif cn == 'Higher Education Council, Bahrain':
              client_name = 'Higher Education Council Bahrain (HECBH)'
              
          elif cn == 'Ministry of Education Bahrain':
              client_name = 'Ministry of Education Bahrain (MOEBH)'
              
          elif cn == 'Ministry of Labour and Social Development, Bahrain':
              client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'
  
          elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
              client_name = 'Other'
              
          elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
              client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
              
          elif cn == 'National Center for Complementary and Alternative Medicine':
              client_name = 'Other'
              
          elif cn == 'Saudi Commission for Health Specialties':
              client_name = 'Saudi Commission for Health Specialities (SCHS)'
              
          elif cn == 'DHAMAN':
              client_name = 'Health Assurance Hospitals Company (DHAMAN)'
              
          elif cn == 'Kuwait Society of Engineers':
              client_name = 'Kuwait Society of Engineers (KSE)'
              
          elif cn == 'Oman Medical Specialty Board':
              client_name = 'Oman Medical Speciality Board (OMSB)'
              
          elif cn == 'Oman Society of Engineers':
              client_name = 'Oman Society of Engineers (OSE)'
              
          elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
              client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
              
          elif cn == 'Ministry of Manpower, Singapore':
              client_name = 'Ministry of Manpower Singapore (MOMS)'
              
          elif cn == 'Community Development Authority':
              client_name = 'Community Development Authority Dubai (CDAD)'
              
          elif cn == 'Department of Community Development Abu Dhabi':
              client_name = 'Department of Community Development Abu Dhabi'
              
          elif cn == 'Department of Health, Abu Dhabi':
              client_name = 'Department of Health Abu Dhabi (DOHAD)'
              
          elif cn == 'Dubai Corporation For Ambulance Services':
              client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
              
          elif cn == 'Dubai Health Authority':
              client_name = 'Dubai Health Authority (DHA)'
              
          elif cn == 'Ministry of Education UAE':
              client_name = 'Ministry of Education UAE (MOE UAE)'
              
          elif cn == 'Ministry of Health and Prevention':
              client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
              
          elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
              client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
              
          elif cn == 'Sharjah Health Authority':
              client_name = 'Other'
              
          elif cn == 'Social Services Department Sharjah':
              client_name = 'Social Services Department (SSD)'
              
          elif cn == 'General Medical Council United Kingdom':
              client_name = 'General Medical Council UK (GMCUK)'
              
          elif cn == 'Yemeni Supreme Medical Council':
              client_name = 'Yemeni Supreme Medical Council(YSMC)'
                 
          else:
              client_name = 'Other'
          
          ct = None
          if last_user_msg == '1':
             ct = "I am an individual APPLICANT"
             
          elif last_user_msg == '2':
             ct = "I am from a PRO/Agency"
              
          msg_sent = ticket_creation_clarification(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Clarification', cf_closure_problem_types = 'Clarification of Report Information',cf_problem_disposition = 'Clarification from IA' , status = 2, priority = 1, type = 'Report Error Correction',cf_licensing_authority_or_institution = client_name)
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_ini"),
          
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification_ini_validation"),
          
    elif last_identifier == 'ticket clarification_ini_validation':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        user_email_msg = phone_email(phone)
        
        
        if last_user_msg == '1' or last_user_msg == '2':
            
          user_description_id = WhatsappMessages.objects.filter(identifier = "ticket clarification_ini", message_receiver = sender_number).values('id').last()
          user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
          user_description_msg = user_description[0]['message']
          
          # user_case_id = WhatsappMessages.objects.filter(identifier = "query_clr_ct_ini", message_receiver = sender_number).values('id').last()
          # user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
          # user_case_msg = user_case[0]['message']
          
          user_inp_id = WhatsappMessages.objects.filter(identifier = "Report clarification query 1_ini",message_receiver = sender_number).values('id').last()
          user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
          user_inp_msg = user_inp[0]['message']
          
          
          cn = multiple_client_phone(phone = phone, case_number_by_user = user_inp_msg)
          client_name = None
          
          if cn == 'Bahrain Ministry of Justice, Islamic Affairs and Waqf':
              client_name = 'Ministry of Justice Bahrain (MOJBH)'
              
          elif cn == 'Council for Regulating the Practice of Engineering Professions':
              client_name = 'The Council of Regulating the Practice of Engineering Professions (CRPEP)'
              
          elif cn == 'Higher Education Council, Bahrain':
              client_name = 'Higher Education Council Bahrain (HECBH)'
              
          elif cn == 'Ministry of Education Bahrain':
              client_name = 'Ministry of Education Bahrain (MOEBH)'
              
          elif cn == 'Ministry of Labour and Social Development, Bahrain':
              client_name = 'Ministry of Labour and Social Development Bahrain (MOLSD)'
  
          elif cn == 'Ministry of Works, Municipalities Affairs and Urban Planning Bahrain':
              client_name = 'Other'
              
          elif cn == 'National Health Regulatory Authority - Bahrain (NHRA)':
              client_name = 'Bahrain National Health Regulatory Authority (NHRA)'
              
          elif cn == 'National Center for Complementary and Alternative Medicine':
              client_name = 'Other'
              
          elif cn == 'Saudi Commission for Health Specialties':
              client_name = 'Saudi Commission for Health Specialities (SCHS)'
              
          elif cn == 'DHAMAN':
              client_name = 'Health Assurance Hospitals Company (DHAMAN)'
              
          elif cn == 'Kuwait Society of Engineers':
              client_name = 'Kuwait Society of Engineers (KSE)'
              
          elif cn == 'Oman Medical Specialty Board':
              client_name = 'Oman Medical Speciality Board (OMSB)'
              
          elif cn == 'Oman Society of Engineers':
              client_name = 'Oman Society of Engineers (OSE)'
              
          elif cn == 'Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)':
              client_name = '(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar'
              
          elif cn == 'Ministry of Manpower, Singapore':
              client_name = 'Ministry of Manpower Singapore (MOMS)'
              
          elif cn == 'Community Development Authority':
              client_name = 'Community Development Authority Dubai (CDAD)'
              
          elif cn == 'Department of Community Development Abu Dhabi':
              client_name = 'Department of Community Development Abu Dhabi'
              
          elif cn == 'Department of Health, Abu Dhabi':
              client_name = 'Department of Health Abu Dhabi (DOHAD)'
              
          elif cn == 'Dubai Corporation For Ambulance Services':
              client_name = 'Dubai Corporation for Ambulance Services (DCAS)'
              
          elif cn == 'Dubai Health Authority':
              client_name = 'Dubai Health Authority (DHA)'
              
          elif cn == 'Ministry of Education UAE':
              client_name = 'Ministry of Education UAE (MOE UAE)'
              
          elif cn == 'Ministry of Health and Prevention':
              client_name = 'Ministry of Health and Prevention UAE (MOHUAE)'
              
          elif cn == 'Ministry of Human Resources and Emiratisation(MOHRE)':
              client_name = 'Ministry of Human Resources and Emiratisation(MOHRE)'
              
          elif cn == 'Sharjah Health Authority':
              client_name = 'Other'
              
          elif cn == 'Social Services Department Sharjah':
              client_name = 'Social Services Department (SSD)'
              
          elif cn == 'General Medical Council United Kingdom':
              client_name = 'General Medical Council UK (GMCUK)'
              
          elif cn == 'Yemeni Supreme Medical Council':
              client_name = 'Yemeni Supreme Medical Council(YSMC)'
                 
          else:
              client_name = 'Other'
          
          ct = None
          if last_user_msg == '1':
             ct = "I am an individual APPLICANT"
             
          elif last_user_msg == '2':
             ct = "I am from a PRO/Agency"
              
          msg_sent = ticket_creation_clarification(description = user_description_msg, email = 'atulkumar@dataflowgroup.com', cf_dataflow_case_numbner = 'NA', cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = 'NA', subject = 'Report Clarification', cf_closure_problem_types = 'Clarification of Report Information',cf_problem_disposition = 'Clarification from IA' , status = 2, priority = 1, type = 'Report Error Correction',cf_licensing_authority_or_institution = client_name)
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
           )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_ini"),
          
        else:
          msg_sent = "Please enter either 1 or 2"
          returned_mesage = twilioclient.messages.create(
          from_=str(receiver),
          body= msg_sent,
          to=str(sender_number)
          )
          WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ticket clarification_ini_validation"),
      
    elif last_identifier == "other ques clarification_ini":     
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_ini_validation"),

    elif last_identifier == "other ques clarification_ini_validation":     
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report clarification query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
        else:
            msg_sent = "Please type Y or N"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques clarification_ini_validation"),
       
    ######################################### Report copy  ##################################################################

    elif last_identifier == "Report copy query":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query 1"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
          
    elif last_identifier == "Report copy query 1":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report copy query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
            user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
            user_passport_msg = user_passport[0]['message']
            msg_sent = cases_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Report copy"),
        
        elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            msg_sent = cases_phone(cli_name = client_name,phone=phone,email=None)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Report copy"),
    
        # else:
        #     WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
        #     
        
    elif last_identifier == "other ques related to Report copy":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_copy"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == "quess_copy":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_copy"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query"),
     
    elif last_identifier == "ques_ask_copy":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_number_copy"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),       
            
    elif last_identifier == 'query_ques_number_copy':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ct_copy"),
        
    elif last_identifier == 'query_ques_ct_copy':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ques_number_copy", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ques_ct_copy", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report copy query 1",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to Report copy",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
                    
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Report Copy Request', cf_closure_problem_types = 'Report Copy Request', cf_problem_disposition = 'Veriflow',status = 2, priority = 1,type = 'Unable to find my report on www.dataflowstatus.com portal',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_copy"),
    
    elif last_identifier == "query_ques_copy":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    ####################### Report copy - Name #########################################
            
    elif last_identifier == "Report_copy name query":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_copy_name"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "quess_copy_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_copy_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_copy name query"),
    
    elif last_identifier == "ques_ask_copy_name":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_copy_number_name"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_copy name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == 'query_copy_number_name':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_copy_ct_name"),
        
    elif last_identifier == 'query_copy_ct_name':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_copy_number_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_copy_ct_name", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        msg_sent = ticket_creation_app(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Report Copy Request', cf_closure_problem_types = 'Report Copy Request', cf_problem_disposition = 'Veriflow',status = 2, priority = 1,type = 'Unable to find my report on www.dataflowstatus.com portal',cf_licensing_authority_or_institution = 'Other')
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_copy_name"),
    
    elif last_identifier == "query_ques_copy_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report_copy name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    #################################### Report copy - Phone ########################################
    
    elif last_identifier == "Report copy query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query 1_ini"),
        
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
          
    elif last_identifier == "Report copy query 1_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report copy query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
            user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
            user_passport_msg = user_passport[0]['message']
            msg_sent = cases_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Report copy_ini"),
        
        elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            msg_sent = cases_phone(cli_name = client_name,phone=phone,email=None)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Report copy_ini"),
    
        # else:
        #     WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
        #     
        
    elif last_identifier == "other ques related to Report copy_ini":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_copy_ini"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == "quess_copy_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_copy_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query_ini"),
     
    elif last_identifier == "ques_ask_copy_ini":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_number_copy_ini"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),       
            
    elif last_identifier == 'query_ques_number_copy_ini':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ct_copy_ini"),
        
    elif last_identifier == 'query_ques_ct_copy_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ques_number_copy_ini", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ques_ct_copy_ini", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Report copy query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to Report copy_ini",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
                    
        msg_sent = ticket_creation(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Report Copy Request', cf_closure_problem_types = 'Report Copy Request', cf_problem_disposition = 'Veriflow',status = 2, priority = 1,type = 'Unable to find my report on www.dataflowstatus.com portal',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_copy_ini"),
    
    elif last_identifier == "query_ques_copy_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Report copy query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    

    ########################################### Re-verification and appeal enquiries ######################################
    
    # elif last_identifier == "Re-verification query":

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_appeal"),
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    # elif last_identifier == "quess_appeal":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg == '1':
    #         msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_appeal"),
        
        
    #     elif last_user_msg == '2':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query"),
        
    # elif last_identifier == "ques_ask_appeal":
      
    #   if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_number"),
    
    #   elif last_next_step.startswith("Do you have any other query? (Y or N)"):

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    # elif last_identifier == 'query_appeal_number':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_ct"),
    
    # elif last_identifier == 'query_appeal_ct':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #     user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #     user_email_msg = user_email[0]['message']
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_appeal_number", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_appeal_ct", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
           
    #     msg_sent = ticket_creation_app(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Re-verification / Appeal Request', cf_problem_disposition = 'Unable To Verify',status = 2, priority = 1,type = 'Apply for Appeal or Re-verification',cf_licensing_authority_or_institution = 'Other')
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_appeal"),
        
    # elif last_identifier == "query_ques_appeal":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
            
    ########################## Re-verification and appeal enquiries - name ###################################
    
    elif last_identifier == "Re-verification_name query":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_appeal_name"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "quess_appeal_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_appeal_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification_name query"),
            
    elif last_identifier == "ques_ask_appeal_name":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_number_name"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == 'query_appeal_number_name':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_ct_name"),
        
    elif last_identifier == 'query_appeal_ct_name':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_appeal_number_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_appeal_ct_name", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"

           
        msg_sent = ticket_creation_app(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Re-verification / Appeal Request', cf_problem_disposition = 'Unable To Verify',status = 2, priority = 1,type = 'Apply for Appeal or Re-verification',cf_licensing_authority_or_institution = 'Other')
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_appeal_name"),
        
    elif last_identifier == "query_ques_appeal_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification_name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
            
  ######################################### Re-verification and appeal enquiries - Phone ###############################
  
    elif last_identifier == "Re-verification query_ini":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_appeal_ini"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),

        else:
            msg_sent = "Please type either 'Y' or 'N'."
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query_ini"),
  
    elif last_identifier == "quess_appeal_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = already_existing_user(user_in = message, phone = phone)
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body=msg_sent,
            to=str(sender_number),
            ) 
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "case_status_country"),  
        elif last_user_msg == '2':
            msg_sent =  "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "trial"),
        else:
            msg_sent = 'Please type either 1 or 2'
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
            )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "create_ticket_or_return_email"),    

    # elif last_identifier == "ques_ask_appeal_ini":
      
    #   if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_number_ini"),
    
    #   elif last_next_step.startswith("Do you have any other query? (Y or N)"):

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query_ini"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    # elif last_identifier == 'query_appeal_number_ini':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_appeal_ct_ini"),
    
    # elif last_identifier == 'query_appeal_ct_ini':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
    #     user_email_msg = phone_email(phone)
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_appeal_number_ini", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_appeal_ct_ini", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
           
    #     msg_sent = ticket_creation_app(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Re-verification and appeal enquiries', cf_closure_problem_types = 'Re-verification / Appeal Request', cf_problem_disposition = 'Unable To Verify',status = 2, priority = 1,type = 'Apply for Appeal or Re-verification',cf_licensing_authority_or_institution = 'Other')
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_appeal_ini"),
        
    # elif last_identifier == "query_ques_appeal_ini":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Re-verification query_ini"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
  
  
  ###################################### Sharing Document ##################################
  
    # elif last_identifier == "Sharing query":
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
        
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
    #     user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
    #     user_user_msg = user_user[0]['message']
    #     msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query 1"),
        
        
    #     if last_user_msg == "1":
    #       count_name = "Bahrain"
    #     elif last_user_msg == "2":
    #       count_name = 'KSA' 
    #     elif last_user_msg == "3":
    #       count_name = 'Kuwait'
    #     elif last_user_msg == "4":
    #       count_name = 'Oman' 
    #     elif last_user_msg == "5":
    #       count_name = 'Qatar' 
    #     elif last_user_msg == "6":
    #       count_name = 'Singapore' 
    #     elif last_user_msg == "7":
    #       count_name = 'UAE' 
    #     elif last_user_msg == "8":
    #       count_name = 'United Kingdom' 
    #     elif last_user_msg == "9":
    #       count_name = 'Yemen' 
          
    # elif last_identifier == "Sharing query 1":
    #     phone = last_query['message_receiver']
    #     phone = phone[10:]
        
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "Sharing query 1",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
    #     validation_msg = stating_query['message']
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg == '1':
    #           client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
    #       elif last_user_msg == '2':
    #           client_name = "Council for Regulating the Practice of Engineering Professions"
          
    #       elif last_user_msg == '3':
    #           client_name = "Higher Education Council, Bahrain"
                
    #       elif last_user_msg == '4':
    #           client_name = "Ministry of Education Bahrain"
              
    #       elif last_user_msg == '5':
    #           client_name = "Ministry of Labour and Social Development, Bahrain"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
    #       elif last_user_msg == '7':
    #           client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
    #     elif user_inp_msg == '2':
    #       if last_user_msg == '1':
    #           client_name = "National Center for Complementary and Alternative Medicine"
          
    #       elif last_user_msg == '2':
    #           client_name = "Saudi Commission for Health Specialties"
              
    #     elif user_inp_msg == '3':
    #       if last_user_msg == '1':
    #           client_name = "DHAMAN"
                
    #       elif last_user_msg == '2':
    #           client_name = "Kuwait Society of Engineers"
              
    #     elif user_inp_msg == '4':
    #       if last_user_msg == '1':
    #           client_name = "Oman Medical Specialty Board"
                
    #       elif last_user_msg == '2':
    #           client_name = "Oman Society of Engineers"
              
    #     elif user_inp_msg == '5':
    #       if last_user_msg == '1':
    #           client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
    #     elif user_inp_msg == '6':
    #       if last_user_msg == '1':
    #           client_name = "Ministry of Manpower, Singapore"
              
    #     elif user_inp_msg == '7':
    #       if last_user_msg == '1':
    #           client_name = "Community Development Authority"
                
    #       elif last_user_msg == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
          
    #       elif last_user_msg == '3':
    #           client_name = "Department of Health, Abu Dhabi"
                
    #       elif last_user_msg == '4':
    #           client_name = "Dubai Corporation For Ambulance Services"
              
    #       elif last_user_msg == '5':
    #           client_name = "Dubai Health Authority"
                
    #       elif last_user_msg == '6':
    #           client_name = "Ministry of Education UAE"
              
    #       elif last_user_msg == '7':
    #           client_name = "Ministry of Health and Prevention"
              
    #       elif last_user_msg == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
    #       elif last_user_msg == '9':
    #           client_name = "Sharjah Health Authority"
              
    #       elif last_user_msg == '10':
    #           client_name = "Social Services Department Sharjah"
              
    #     elif user_inp_msg == '8':
    #       if last_user_msg == '1':
    #           client_name = "General Medical Council United Kingdom"
              
    #     elif user_inp_msg == '9':
    #       if last_user_msg == '1':
    #           client_name = "Yemeni Supreme Medical Council"
              
    #     if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
    #         user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #         user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #         user_email_msg = user_email[0]['message']
    #         user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
    #         user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
    #         user_passport_msg = user_passport[0]['message']
    #         msg_sent = cases_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Sharing"),
        
    #     elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
    #         msg_sent = cases_phone(cli_name = client_name,phone=phone,email=None)
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Sharing"),
    
    #     # else:
    #     #     WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
    #     #     
        
    # elif last_identifier == "other ques related to Sharing":

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_sharing"),
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_= str(receiver),
    #         body = msg_sent,
    #         to = str(sender_number),
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    # elif last_identifier == "quess_sharing":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = str(last_msg['message'])
        
    #     if last_user_msg == '1':
    #         msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_sharing"),
        
        
    #     elif last_user_msg == '2':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query"),
     
    # elif last_identifier == "ques_ask_sharing":
      
    #   if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
    #     msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_number_sharing"),
    
    #   elif last_next_step.startswith("Do you have any other query? (Y or N)"):

    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),       
            
    # elif last_identifier == 'query_ques_number_sharing':
    #     msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ct_sharing"),
        
    # elif last_identifier == 'query_ques_ct_sharing':
      
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
    #     user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
    #     user_email_msg = user_email[0]['message']
        
    #     user_description_id = WhatsappMessages.objects.filter(identifier = "query_ques_number_sharing", message_receiver = sender_number).values('id').last()
    #     user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
    #     user_description_msg = user_description[0]['message']
        
    #     user_case_id = WhatsappMessages.objects.filter(identifier = "query_ques_ct_sharing", message_receiver = sender_number).values('id').last()
    #     user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
    #     user_case_msg = user_case[0]['message']
        
        
    #     user_inp_id = WhatsappMessages.objects.filter(identifier = "Sharing query 1",message_receiver = sender_number).values('id').last()
    #     user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
    #     user_inp_msg = user_inp[0]['message']
        
    #     user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to Sharing",message_receiver = sender_number).values('id').last()
    #     user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
    #     last_user_msg1 = user_cli[0]['message']
        
        
    #     client_name = None
    #     if user_inp_msg == '1':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Justice Bahrain (MOJBH)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Higher Education Council Bahrain (HECBH)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Ministry of Education Bahrain (MOEBH)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
    #     elif user_inp_msg == '2':
    #       if last_user_msg1 == '1':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Saudi Commission for Health Specialities (SCHS)"
        
    #     elif user_inp_msg == '3':
    #       if last_user_msg1 == '1':
    #           client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Kuwait Society of Engineers (KSE)"
        
    #     elif user_inp_msg == '4':
    #       if last_user_msg1 == '1':
    #           client_name = "Oman Medical Speciality Board (OMSB)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Oman Society of Engineers (OSE)"
        
    #     elif user_inp_msg == '5':
    #       if last_user_msg1 == '1':
    #           client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
    #     elif user_inp_msg == '6':
    #       if last_user_msg1 == '1':
    #           client_name = "Ministry of Manpower Singapore (MOMS)"
        
    #     elif user_inp_msg == '7':
    #       if last_user_msg1 == '1':
    #           client_name = "Community Development Authority Dubai (CDAD)"
        
    #       elif last_user_msg1 == '2':
    #           client_name = "Department of Community Development Abu Dhabi"
        
    #       elif last_user_msg1 == '3':
    #           client_name = "Department of Health Abu Dhabi (DOHAD)"
        
    #       elif last_user_msg1 == '4':
    #           client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
    #       elif last_user_msg1 == '5':
    #           client_name = "Dubai Health Authority (DHA)"
        
    #       elif last_user_msg1 == '6':
    #           client_name = "Ministry of Education UAE (MOE UAE)"
        
    #       elif last_user_msg1 == '7':
    #           client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
    #       elif last_user_msg1 == '8':
    #           client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
    #       elif last_user_msg1 == '9':
    #           client_name = "Other"
        
    #       elif last_user_msg1 == '10':
    #           client_name = "Social Services Department (SSD)"
        
    #     elif user_inp_msg == '8':
    #       if last_user_msg1 == '1':
    #           client_name = "General Medical Council UK (GMCUK)"
        
    #     elif user_inp_msg == '9':
    #       if last_user_msg1 == '1':
    #           client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
    #     ct = None
    #     if last_user_msg == '1':
    #        ct = "I am an individual APPLICANT"
           
    #     elif last_user_msg == '2':
    #        ct = "I am from a PRO/Agency"
                    
    #     msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Sharing documents/information requested by Dataflow Team', cf_closure_problem_types = 'Application Submission Query',status = 2, priority = 1, type = 'Sharing documents/information requested by Dataflow Team',cf_licensing_authority_or_institution = client_name)
    #     returned_mesage = twilioclient.messages.create(
    #     from_=str(receiver),
    #     body= msg_sent,
    #     to=str(sender_number)
    #      )
    #     WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_sharing"),
    
    # elif last_identifier == "query_ques_sharing":
    #     last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
    #     last_user_msg = last_msg['message']
    #     print(last_user_msg)
        
    #     if last_user_msg.lower() == 'y':
    #         msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query"),
            
            
    #     elif last_user_msg.lower() == 'n':
    #         msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
    #         returned_mesage = twilioclient.messages.create(
    #         from_=str(receiver),
    #         body= msg_sent,
    #         to=str(sender_number)
    #          )
    #         WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    ####################### Sharing Document - Name #########################################
            
    elif last_identifier == "Sharing name query":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_sharing_name"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    elif last_identifier == "quess_sharing_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_sharing_name"),
        
        
        elif last_user_msg == '2':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing name query"),
    
    elif last_identifier == "ques_ask_sharing_name":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_sharing_number_name"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == 'query_sharing_number_name':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_sharing_ct_name"),
        
    elif last_identifier == 'query_sharing_ct_name':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        user_email_msg = user_email[0]['message']
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_sharing_number_name", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_sharing_ct_name", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
        
        msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Sharing documents/information requested by Dataflow Team', cf_closure_problem_types = 'Application Submission Query',status = 2, priority = 1, type = 'Sharing documents/information requested by Dataflow Team',cf_licensing_authority_or_institution = 'Other')
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_sharing_name"),
    
    elif last_identifier == "query_ques_sharing_name":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = queries_for_name
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing name query"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    #################################### Sharing Document - Phone ########################################
    
    elif last_identifier == "Sharing query_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_user_id = WhatsappMessages.objects.filter(message_receiver = sender_number).values('id').last()
        user_user = WhatsappMessages.objects.filter(id = int(user_user_id['id']) - 1 ).values()
        user_user_msg = user_user[0]['message']
        msg_sent = already_existing_user_client(us_inp = message,user_in = user_user_msg,phone = phone)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query 1_ini"),
        
        if last_user_msg == "1":
          count_name = "Bahrain"
        elif last_user_msg == "2":
          count_name = 'KSA' 
        elif last_user_msg == "3":
          count_name = 'Kuwait'
        elif last_user_msg == "4":
          count_name = 'Oman' 
        elif last_user_msg == "5":
          count_name = 'Qatar' 
        elif last_user_msg == "6":
          count_name = 'Singapore' 
        elif last_user_msg == "7":
          count_name = 'UAE' 
        elif last_user_msg == "8":
          count_name = 'United Kingdom' 
        elif last_user_msg == "9":
          count_name = 'Yemen' 
          
    elif last_identifier == "Sharing query 1_ini":
        phone = last_query['message_receiver']
        phone = phone[10:]
        
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Sharing query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        stating_query = WhatsappMessages.objects.filter(message_receiver = sender_number, identifier = "phone_validated").values().last()
        validation_msg = stating_query['message']
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg == '1':
              client_name = "Bahrain Ministry of Justice, Islamic Affairs and Waqf"
                
          elif last_user_msg == '2':
              client_name = "Council for Regulating the Practice of Engineering Professions"
          
          elif last_user_msg == '3':
              client_name = "Higher Education Council, Bahrain"
                
          elif last_user_msg == '4':
              client_name = "Ministry of Education Bahrain"
              
          elif last_user_msg == '5':
              client_name = "Ministry of Labour and Social Development, Bahrain"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Works, Municipalities Affairs and Urban Planning Bahrain"
              
          elif last_user_msg == '7':
              client_name = "National Health Regulatory Authority - Bahrain (NHRA)"
            
        elif user_inp_msg == '2':
          if last_user_msg == '1':
              client_name = "National Center for Complementary and Alternative Medicine"
          
          elif last_user_msg == '2':
              client_name = "Saudi Commission for Health Specialties"
              
        elif user_inp_msg == '3':
          if last_user_msg == '1':
              client_name = "DHAMAN"
                
          elif last_user_msg == '2':
              client_name = "Kuwait Society of Engineers"
              
        elif user_inp_msg == '4':
          if last_user_msg == '1':
              client_name = "Oman Medical Specialty Board"
                
          elif last_user_msg == '2':
              client_name = "Oman Society of Engineers"
              
        elif user_inp_msg == '5':
          if last_user_msg == '1':
              client_name = "Department of Healthcare Professions (DHP) - Ministry of Public Health (MOPH)"   
              
        elif user_inp_msg == '6':
          if last_user_msg == '1':
              client_name = "Ministry of Manpower, Singapore"
              
        elif user_inp_msg == '7':
          if last_user_msg == '1':
              client_name = "Community Development Authority"
                
          elif last_user_msg == '2':
              client_name = "Department of Community Development Abu Dhabi"
          
          elif last_user_msg == '3':
              client_name = "Department of Health, Abu Dhabi"
                
          elif last_user_msg == '4':
              client_name = "Dubai Corporation For Ambulance Services"
              
          elif last_user_msg == '5':
              client_name = "Dubai Health Authority"
                
          elif last_user_msg == '6':
              client_name = "Ministry of Education UAE"
              
          elif last_user_msg == '7':
              client_name = "Ministry of Health and Prevention"
              
          elif last_user_msg == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
              
          elif last_user_msg == '9':
              client_name = "Sharjah Health Authority"
              
          elif last_user_msg == '10':
              client_name = "Social Services Department Sharjah"
              
        elif user_inp_msg == '8':
          if last_user_msg == '1':
              client_name = "General Medical Council United Kingdom"
              
        elif user_inp_msg == '9':
          if last_user_msg == '1':
              client_name = "Yemeni Supreme Medical Council"
              
        if validation_msg.startswith("Please may I have the email address you used to register with us?") or validation_msg.startswith(msg_for_email_validation):
            user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
            user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
            user_email_msg = user_email[0]['message']
            user_passport_id = WhatsappMessages.objects.filter(identifier = "passport_received", message_receiver = sender_number).values('id').last()
            user_passport = WhatsappMessages.objects.filter(id = int(user_passport_id['id']) - 1 ).values()
            user_passport_msg = user_passport[0]['message']
            msg_sent = cases_email(cli_name = client_name, email = user_email_msg.lower(), passport_number = user_passport_msg.upper())
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Sharing_ini"),
        
        elif "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply" in validation_msg :
            msg_sent = cases_phone(cli_name = client_name,phone=phone,email=None)
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "other ques related to Sharing_ini"),
    
        # else:
        #     WhatsappMessages.objects.create(message = last_second_identifier, sender_name = "testing", sender_number = "testing", MessageSid = MessageSid, message_receiver = "testing", identifier = "-"),
        #     
        
    elif last_identifier == "other ques related to Sharing_ini":

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg.lower() == 'y':
            msg_sent = "1. Create a support ticket\n2. Return to the main menu\n\nSelect the query by choosing the relevant number from 1 or 2"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "quess_sharing_ini"),
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_= str(receiver),
            body = msg_sent,
            to = str(sender_number),
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
            
    elif last_identifier == "quess_sharing_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = str(last_msg['message'])
        
        if last_user_msg == '1':
            msg_sent = "Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "ques_ask_sharing_ini"),
        
        
        elif last_user_msg == '2':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query_ini"),
     
    elif last_identifier == "ques_ask_sharing_ini":
      
      if last_next_step.startswith("Please provide a detailed description of the issue you are facing so we can create the support ticket on your behalf. "):
        msg_sent = "Please type the corresponding case number associated with the ticket you want to create. If you don't have a case number yet, please type NA."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_number_sharing_ini"),
    
      elif last_next_step.startswith("Do you have any other query? (Y or N)"):

        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),       
            
    elif last_identifier == 'query_ques_number_sharing_ini':
        msg_sent = "Are you : \n\n1. An applicant \n2. A PRO/Agency"
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_ct_sharing_ini"),
        
    elif last_identifier == 'query_ques_ct_sharing_ini':
      
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        # user_email_id = WhatsappMessages.objects.filter(identifier = "email_received", message_receiver = sender_number).values('id').last()
        # user_email = WhatsappMessages.objects.filter(id = int(user_email_id['id']) - 1 ).values()
        # user_email_msg = user_email[0]['message']
        
        phone = last_query['message_receiver']
        phone = phone[10:]
        user_email_msg = phone_email(phone)
        
        user_description_id = WhatsappMessages.objects.filter(identifier = "query_ques_number_sharing_ini", message_receiver = sender_number).values('id').last()
        user_description = WhatsappMessages.objects.filter(id = int(user_description_id['id']) - 1 ).values()
        user_description_msg = user_description[0]['message']
        
        user_case_id = WhatsappMessages.objects.filter(identifier = "query_ques_ct_sharing_ini", message_receiver = sender_number).values('id').last()
        user_case = WhatsappMessages.objects.filter(id = int(user_case_id['id']) - 1 ).values()
        user_case_msg = user_case[0]['message']
        
        
        user_inp_id = WhatsappMessages.objects.filter(identifier = "Sharing query 1_ini",message_receiver = sender_number).values('id').last()
        user_inp = WhatsappMessages.objects.filter(id = int(user_inp_id['id']) - 1 ).values()
        user_inp_msg = user_inp[0]['message']
        
        user_cli_id = WhatsappMessages.objects.filter(identifier = "other ques related to Sharing_ini",message_receiver = sender_number).values('id').last()
        user_cli = WhatsappMessages.objects.filter(id = int(user_cli_id['id']) - 1 ).values()
        last_user_msg1 = user_cli[0]['message']
        
        
        client_name = None
        if user_inp_msg == '1':
          if last_user_msg1 == '1':
              client_name = "Ministry of Justice Bahrain (MOJBH)"
        
          elif last_user_msg1 == '2':
              client_name = "The Council of Regulating the Practice of Engineering Professions (CRPEP)"
        
          elif last_user_msg1 == '3':
              client_name = "Higher Education Council Bahrain (HECBH)"
        
          elif last_user_msg1 == '4':
              client_name = "Ministry of Education Bahrain (MOEBH)"
        
          elif last_user_msg1 == '5':
              client_name = "Ministry of Labour and Social Development Bahrain (MOLSD)"
        
          elif last_user_msg1 == '6':
              client_name = "Other"
        
          elif last_user_msg1 == '7':
              client_name = "Bahrain National Health Regulatory Authority (NHRA)"
        
        elif user_inp_msg == '2':
          if last_user_msg1 == '1':
              client_name = "Other"
        
          elif last_user_msg1 == '2':
              client_name = "Saudi Commission for Health Specialities (SCHS)"
        
        elif user_inp_msg == '3':
          if last_user_msg1 == '1':
              client_name = "Health Assurance Hospitals Company (DHAMAN)"
        
          elif last_user_msg1 == '2':
              client_name = "Kuwait Society of Engineers (KSE)"
        
        elif user_inp_msg == '4':
          if last_user_msg1 == '1':
              client_name = "Oman Medical Speciality Board (OMSB)"
        
          elif last_user_msg1 == '2':
              client_name = "Oman Society of Engineers (OSE)"
        
        elif user_inp_msg == '5':
          if last_user_msg1 == '1':
              client_name = "(DHP) Department of Healthcare Practitioners - Ministry of Public Health - The State of Qatar"   
        
        elif user_inp_msg == '6':
          if last_user_msg1 == '1':
              client_name = "Ministry of Manpower Singapore (MOMS)"
        
        elif user_inp_msg == '7':
          if last_user_msg1 == '1':
              client_name = "Community Development Authority Dubai (CDAD)"
        
          elif last_user_msg1 == '2':
              client_name = "Department of Community Development Abu Dhabi"
        
          elif last_user_msg1 == '3':
              client_name = "Department of Health Abu Dhabi (DOHAD)"
        
          elif last_user_msg1 == '4':
              client_name = "Dubai Corporation for Ambulance Services (DCAS)"
        
          elif last_user_msg1 == '5':
              client_name = "Dubai Health Authority (DHA)"
        
          elif last_user_msg1 == '6':
              client_name = "Ministry of Education UAE (MOE UAE)"
        
          elif last_user_msg1 == '7':
              client_name = "Ministry of Health and Prevention UAE (MOHUAE)"
        
          elif last_user_msg1 == '8':
              client_name = "Ministry of Human Resources and Emiratisation(MOHRE)"
        
          elif last_user_msg1 == '9':
              client_name = "Other"
        
          elif last_user_msg1 == '10':
              client_name = "Social Services Department (SSD)"
        
        elif user_inp_msg == '8':
          if last_user_msg1 == '1':
              client_name = "General Medical Council UK (GMCUK)"
        
        elif user_inp_msg == '9':
          if last_user_msg1 == '1':
              client_name = "Yemeni Supreme Medical Council(YSMC)"
        
        
        ct = None
        if last_user_msg == '1':
           ct = "I am an individual APPLICANT"
           
        elif last_user_msg == '2':
           ct = "I am from a PRO/Agency"
                    
        msg_sent = ticket_creation_adv(description = user_description_msg, email = 'pahlawat@dataflowgroup.com', cf_dataflow_case_numbner = user_case_msg, cf_commitment_date_given = date_string, cf_customer_type = ct, cf_enter_dataflow_case_number_mandatory_to_look_up_and_enter_from_veriflow = user_case_msg, subject = 'Sharing documents/information requested by Dataflow Team', cf_closure_problem_types = 'Application Submission Query',status = 2, priority = 1, type = 'Sharing documents/information requested by Dataflow Team',cf_licensing_authority_or_institution = client_name)
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "query_ques_sharing_ini"),
    
    elif last_identifier == "query_ques_sharing_ini":
        last_msg = WhatsappMessages.objects.filter(sender_number = sender_number).values().last()
        last_user_msg = last_msg['message']
        print(last_user_msg)
        
        if last_user_msg.lower() == 'y':
            msg_sent = "How can we help you today?\nSelect the query by choosing the relevant number from 1-12 \n\n1. Case Status \n2. How to Apply \n3. Technical error \n4. Refund request \n5. Report clarification \n6. Additional Document Verification \n7. Report copy request \n8. Report re-issuance queries\n9. Retrieve DataFlow case number \n10. Re-verification and appeal enquiries \n11. Sharing documents/information requested by DataFlow Team \n12. Others/General Queries"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "Sharing query_ini"),
            
            
        elif last_user_msg.lower() == 'n':
            msg_sent = "Thank you for contacting the DataFlow Group. Please be assured that we are working to resolve your enquiry as soon as possible. \n\nIf you need any further assistance, Please say 'Hello'"
            returned_mesage = twilioclient.messages.create(
            from_=str(receiver),
            body= msg_sent,
            to=str(sender_number)
             )
            WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
  
  ################################################################################################################################################
    else:
        msg_sent = "Please type Hello for starting the chat."
        returned_mesage = twilioclient.messages.create(
        from_=str(receiver),
        body= msg_sent,
        to=str(sender_number)
         )
        WhatsappMessages.objects.create(message = msg_sent, sender_name = "Whatsapp Bot", sender_number = response['To'], MessageSid = MessageSid, message_receiver = str(sender_number), identifier = "-"),
    
    return HttpResponse('success')
